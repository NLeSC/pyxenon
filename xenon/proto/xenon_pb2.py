# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: xenon/proto/xenon.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='xenon/proto/xenon.proto',
  package='xenon',
  syntax='proto3',
  serialized_pb=_b('\n\x17xenon/proto/xenon.proto\x12\x05xenon\"\x07\n\x05\x45mpty\"v\n\nProperties\x12\x35\n\nproperties\x18\x01 \x03(\x0b\x32!.xenon.Properties.PropertiesEntry\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xd9\x01\n\x13PropertyDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x15\n\rdefault_value\x18\x03 \x01(\t\x12-\n\x04type\x18\x04 \x01(\x0e\x32\x1f.xenon.PropertyDescription.Type\"Y\n\x04Type\x12\n\n\x06STRING\x10\x00\x12\x0b\n\x07\x42OOLEAN\x10\x01\x12\x0b\n\x07INTEGER\x10\x02\x12\n\n\x06\x44OUBLE\x10\x03\x12\x08\n\x04LONG\x10\x04\x12\x08\n\x04SIZE\x10\x05\x12\x0b\n\x07NATURAL\x10\x06\"F\n\x14PropertyDescriptions\x12.\n\nproperties\x18\x01 \x03(\x0b\x32\x1a.xenon.PropertyDescription\"\xfc\x01\n\x1bSchedulerAdaptorDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x1b\n\x13supported_locations\x18\x03 \x03(\t\x12\x38\n\x14supported_properties\x18\x04 \x03(\x0b\x32\x1a.xenon.PropertyDescription\x12\x13\n\x0bis_embedded\x18\x05 \x01(\x08\x12\x1c\n\x14supports_interactive\x18\x06 \x01(\x08\x12\x16\n\x0esupports_batch\x18\x07 \x01(\x08\x12\x18\n\x10uses_file_system\x18\x08 \x01(\x08\"X\n\x1cSchedulerAdaptorDescriptions\x12\x38\n\x0c\x64\x65scriptions\x18\x01 \x03(\x0b\x32\".xenon.SchedulerAdaptorDescription\"\x98\x02\n\x1c\x46ileSystemAdaptorDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x1b\n\x13supported_locations\x18\x03 \x03(\t\x12\x38\n\x14supported_properties\x18\x04 \x03(\x0b\x32\x1a.xenon.PropertyDescription\x12!\n\x19supports_third_party_copy\x18\x05 \x01(\x08\x12 \n\x18\x63\x61n_create_symboliclinks\x18\x06 \x01(\x08\x12\x1e\n\x16\x63\x61n_read_symboliclinks\x18\x07 \x01(\x08\x12\x19\n\x11is_connectionless\x18\x08 \x01(\x08\"Z\n\x1d\x46ileSystemAdaptorDescriptions\x12\x39\n\x0c\x64\x65scriptions\x18\x01 \x03(\x0b\x32#.xenon.FileSystemAdaptorDescription\"\x1b\n\x0b\x41\x64\x61ptorName\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1c\n\x0c\x41\x64\x61ptorNames\x12\x0c\n\x04name\x18\x01 \x03(\t\"O\n\x15\x43\x65rtificateCredential\x12\x10\n\x08\x63\x65rtfile\x18\x01 \x01(\t\x12\x12\n\npassphrase\x18\x02 \x01(\t\x12\x10\n\x08username\x18\x03 \x01(\t\"8\n\x12PasswordCredential\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\"%\n\x11\x44\x65\x66\x61ultCredential\x12\x10\n\x08username\x18\x01 \x01(\t\"\x1c\n\x08Location\x12\x10\n\x08location\x18\x01 \x01(\t\"\xf3\x02\n\x17\x43reateFileSystemRequest\x12\x0f\n\x07\x61\x64\x61ptor\x18\x01 \x01(\t\x12\x10\n\x08location\x18\x02 \x01(\t\x12\x42\n\nproperties\x18\x03 \x03(\x0b\x32..xenon.CreateFileSystemRequest.PropertiesEntry\x12>\n\x16\x63\x65rtificate_credential\x18\x04 \x01(\x0b\x32\x1c.xenon.CertificateCredentialH\x00\x12\x38\n\x13password_credential\x18\x05 \x01(\x0b\x32\x19.xenon.PasswordCredentialH\x00\x12\x36\n\x12\x64\x65\x66\x61ult_credential\x18\x06 \x01(\x0b\x32\x18.xenon.DefaultCredentialH\x00\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x0c\n\ncredential\"\x18\n\nFileSystem\x12\n\n\x02id\x18\x01 \x01(\t\"5\n\x0b\x46ileSystems\x12&\n\x0b\x66ilesystems\x18\x01 \x03(\x0b\x32\x11.xenon.FileSystem\"\'\n\x04Path\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x11\n\tseparator\x18\x02 \x01(\t\"O\n\x0bPathRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04path\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\"d\n\rDeleteRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04path\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x11\n\trecursive\x18\x03 \x01(\x08\"\x95\x02\n\x0b\x43opyRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x1b\n\x06source\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x31\n\x16\x64\x65stination_filesystem\x18\x03 \x01(\x0b\x32\x11.xenon.FileSystem\x12 \n\x0b\x64\x65stination\x18\x04 \x01(\x0b\x32\x0b.xenon.Path\x12)\n\x04mode\x18\x05 \x01(\x0e\x32\x1b.xenon.CopyRequest.CopyMode\x12\x11\n\trecursive\x18\x06 \x01(\x08\"/\n\x08\x43opyMode\x12\n\n\x06\x43REATE\x10\x00\x12\x0b\n\x07REPLACE\x10\x01\x12\n\n\x06IGNORE\x10\x02\"p\n\rRenameRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x1b\n\x06source\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x1b\n\x06target\x18\x03 \x01(\x0b\x32\x0b.xenon.Path\"z\n\x19\x43reateSymbolicLinkRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04link\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x1b\n\x06target\x18\x03 \x01(\x0b\x32\x0b.xenon.Path\"\x1b\n\rCopyOperation\x12\n\n\x02id\x18\x01 \x01(\t\"k\n\x14\x43opyOperationRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12,\n\x0e\x63opy_operation\x18\x02 \x01(\x0b\x32\x14.xenon.CopyOperation\"|\n\x14WaitUntilDoneRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12,\n\x0e\x63opy_operation\x18\x02 \x01(\x0b\x32\x14.xenon.CopyOperation\x12\x0f\n\x07timeout\x18\x03 \x01(\x04\"\xc4\x02\n\nCopyStatus\x12,\n\x0e\x63opy_operation\x18\x01 \x01(\x0b\x32\x14.xenon.CopyOperation\x12\x14\n\x0c\x62ytes_copied\x18\x02 \x01(\x04\x12\x15\n\rbytes_to_copy\x18\x03 \x01(\x04\x12\x0c\n\x04\x64one\x18\x04 \x01(\x08\x12\x0f\n\x07running\x18\x05 \x01(\x08\x12\r\n\x05state\x18\x06 \x01(\t\x12\x15\n\rerror_message\x18\x07 \x01(\t\x12/\n\nerror_type\x18\x08 \x01(\x0e\x32\x1b.xenon.CopyStatus.ErrorType\"e\n\tErrorType\x12\x08\n\x04NONE\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\x12\r\n\tCANCELLED\x10\x02\x12\x12\n\x0e\x41LREADY_EXISTS\x10\x03\x12\x11\n\rNOT_CONNECTED\x10\x04\x12\t\n\x05XENON\x10\x05\"\xff\x02\n\x0ePathAttributes\x12\x19\n\x04path\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12\x15\n\rcreation_time\x18\x02 \x01(\x04\x12\r\n\x05group\x18\x03 \x01(\t\x12\x14\n\x0cis_directory\x18\x04 \x01(\x08\x12\x15\n\ris_executable\x18\x05 \x01(\x08\x12\x11\n\tis_hidden\x18\x06 \x01(\x08\x12\x10\n\x08is_other\x18\x07 \x01(\x08\x12\x13\n\x0bis_readable\x18\x08 \x01(\x08\x12\x12\n\nis_regular\x18\t \x01(\x08\x12\x18\n\x10is_symbolic_link\x18\n \x01(\x08\x12\x13\n\x0bis_writable\x18\x0b \x01(\x08\x12\x18\n\x10last_access_time\x18\x0c \x01(\x04\x12\x1a\n\x12last_modified_time\x18\r \x01(\x04\x12\r\n\x05owner\x18\x0e \x01(\t\x12/\n\x0bpermissions\x18\x0f \x03(\x0e\x32\x1a.xenon.PosixFilePermission\x12\x0c\n\x04size\x18\x10 \x01(\x04\"\x93\x01\n\x1eSetPosixFilePermissionsRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04path\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12/\n\x0bpermissions\x18\x03 \x03(\x0e\x32\x1a.xenon.PosixFilePermission\"&\n\x14ReadFromFileResponse\x12\x0e\n\x06\x62uffer\x18\x01 \x01(\x0c\"t\n\x12WriteToFileRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04path\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x0e\n\x06\x62uffer\x18\x03 \x01(\x0c\x12\x0c\n\x04size\x18\x04 \x01(\x04\"g\n\x13\x41ppendToFileRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x19\n\x04path\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x0e\n\x06\x62uffer\x18\x03 \x01(\x0c\"a\n\x0bListRequest\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x18\n\x03\x64ir\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12\x11\n\trecursive\x18\x03 \x01(\x08\"-\n\x18GetPathSeparatorResponse\x12\x11\n\tseparator\x18\x01 \x01(\t\"\xf1\x02\n\x16\x43reateSchedulerRequest\x12\x0f\n\x07\x61\x64\x61ptor\x18\x01 \x01(\t\x12\x10\n\x08location\x18\x02 \x01(\t\x12\x41\n\nproperties\x18\x03 \x03(\x0b\x32-.xenon.CreateSchedulerRequest.PropertiesEntry\x12>\n\x16\x63\x65rtificate_credential\x18\x04 \x01(\x0b\x32\x1c.xenon.CertificateCredentialH\x00\x12\x38\n\x13password_credential\x18\x05 \x01(\x0b\x32\x19.xenon.PasswordCredentialH\x00\x12\x36\n\x12\x64\x65\x66\x61ult_credential\x18\x06 \x01(\x0b\x32\x18.xenon.DefaultCredentialH\x00\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x0c\n\ncredential\"\x17\n\tScheduler\x12\n\n\x02id\x18\x01 \x01(\t\"2\n\nSchedulers\x12$\n\nschedulers\x18\x01 \x03(\x0b\x32\x10.xenon.Scheduler\"\xce\x03\n\x0eJobDescription\x12\x12\n\nexecutable\x18\x01 \x01(\t\x12\x11\n\targuments\x18\x02 \x03(\t\x12\x19\n\x11working_directory\x18\x03 \x01(\t\x12;\n\x0b\x65nvironment\x18\x04 \x03(\x0b\x32&.xenon.JobDescription.EnvironmentEntry\x12\x12\n\nqueue_name\x18\x05 \x01(\t\x12\x13\n\x0bmax_runtime\x18\x06 \x01(\r\x12\x12\n\nnode_count\x18\x07 \x01(\r\x12\x1a\n\x12processes_per_node\x18\x08 \x01(\r\x12\x1c\n\x14start_single_process\x18\t \x01(\x08\x12\x0e\n\x06stderr\x18\n \x01(\t\x12\r\n\x05stdin\x18\x0b \x01(\t\x12\x0e\n\x06stdout\x18\x0c \x01(\t\x12\x33\n\x07options\x18\r \x03(\x0b\x32\".xenon.JobDescription.OptionsEntry\x1a\x32\n\x10\x45nvironmentEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a.\n\x0cOptionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"h\n\x15SubmitBatchJobRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12*\n\x0b\x64\x65scription\x18\x02 \x01(\x0b\x32\x15.xenon.JobDescription\"}\n\x1bSubmitInteractiveJobRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12*\n\x0b\x64\x65scription\x18\x02 \x01(\x0b\x32\x15.xenon.JobDescription\x12\r\n\x05stdin\x18\x03 \x01(\x0c\"\x11\n\x03Job\x12\n\n\x02id\x18\x01 \x01(\t\"J\n\nJobRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x17\n\x03job\x18\x02 \x01(\x0b\x32\n.xenon.Job\" \n\x04Jobs\x12\x18\n\x04jobs\x18\x02 \x03(\x0b\x32\n.xenon.Job\"V\n\x15GetJobStatusesRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x18\n\x04jobs\x18\x02 \x03(\x0b\x32\n.xenon.Job\"\\\n\x0bWaitRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x17\n\x03job\x18\x02 \x01(\x0b\x32\n.xenon.Job\x12\x0f\n\x07timeout\x18\x03 \x01(\x04\"\x15\n\x05Queue\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x16\n\x06Queues\x12\x0c\n\x04name\x18\x01 \x03(\t\"I\n\x12SchedulerAndQueues\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x0e\n\x06queues\x18\x02 \x03(\t\"K\n\x15GetQueueStatusRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\r\n\x05queue\x18\x02 \x01(\t\"\xb3\x03\n\tJobStatus\x12\x17\n\x03job\x18\x01 \x01(\x0b\x32\n.xenon.Job\x12\r\n\x05state\x18\x02 \x01(\t\x12\x0f\n\x07running\x18\x03 \x01(\x08\x12\x0c\n\x04\x64one\x18\x04 \x01(\x08\x12Z\n\x1escheduler_specific_information\x18\x05 \x03(\x0b\x32\x32.xenon.JobStatus.SchedulerSpecificInformationEntry\x12\x11\n\texit_code\x18\x06 \x01(\x05\x12\x15\n\rerror_message\x18\x07 \x01(\t\x12.\n\nerror_type\x18\x08 \x01(\x0e\x32\x1a.xenon.JobStatus.ErrorType\x1a\x43\n!SchedulerSpecificInformationEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"d\n\tErrorType\x12\x08\n\x04NONE\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\x12\r\n\tCANCELLED\x10\x02\x12\x11\n\rNOT_CONNECTED\x10\x03\x12\t\n\x05XENON\x10\x04\x12\x06\n\x02IO\x10\x05\x12\t\n\x05OTHER\x10\x06\"<\n\x16GetJobStatusesResponse\x12\"\n\x08statuses\x18\x01 \x03(\x0b\x32\x10.xenon.JobStatus\"\xde\x02\n\x0bQueueStatus\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\\\n\x1escheduler_specific_information\x18\x02 \x03(\x0b\x32\x34.xenon.QueueStatus.SchedulerSpecificInformationEntry\x12\x15\n\rerror_message\x18\x03 \x01(\t\x12\x30\n\nerror_type\x18\x04 \x01(\x0e\x32\x1c.xenon.QueueStatus.ErrorType\x1a\x43\n!SchedulerSpecificInformationEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"U\n\tErrorType\x12\x08\n\x04NONE\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\x12\x11\n\rNOT_CONNECTED\x10\x02\x12\t\n\x05XENON\x10\x03\x12\x06\n\x02IO\x10\x04\x12\t\n\x05OTHER\x10\x05\"5\n\rQueueStatuses\x12$\n\x08statuses\x18\x01 \x03(\x0b\x32\x12.xenon.QueueStatus\"W\n\x1cSubmitInteractiveJobResponse\x12\x17\n\x03job\x18\x01 \x01(\x0b\x32\n.xenon.Job\x12\x0e\n\x06stdout\x18\x02 \x01(\x0c\x12\x0e\n\x06stderr\x18\x03 \x01(\x0c\"\x13\n\x02Is\x12\r\n\x05value\x18\x01 \x01(\x08*\xbe\x01\n\x13PosixFilePermission\x12\x08\n\x04NONE\x10\x00\x12\x0e\n\nOWNER_READ\x10\x01\x12\x0f\n\x0bOWNER_WRITE\x10\x02\x12\x11\n\rOWNER_EXECUTE\x10\x03\x12\x0e\n\nGROUP_READ\x10\x04\x12\x0f\n\x0bGROUP_WRITE\x10\x05\x12\x11\n\rGROUP_EXECUTE\x10\x06\x12\x0f\n\x0bOTHERS_READ\x10\x07\x12\x10\n\x0cOTHERS_WRITE\x10\x08\x12\x12\n\x0eOTHERS_EXECUTE\x10\t2\xfe\x0e\n\x11\x46ileSystemService\x12N\n\x16getAdaptorDescriptions\x12\x0c.xenon.Empty\x1a$.xenon.FileSystemAdaptorDescriptions\"\x00\x12\x36\n\x0fgetAdaptorNames\x12\x0c.xenon.Empty\x1a\x13.xenon.AdaptorNames\"\x00\x12R\n\x15getAdaptorDescription\x12\x12.xenon.AdaptorName\x1a#.xenon.FileSystemAdaptorDescription\"\x00\x12=\n\x06\x63reate\x12\x1e.xenon.CreateFileSystemRequest\x1a\x11.xenon.FileSystem\"\x00\x12\x39\n\x0egetAdaptorName\x12\x11.xenon.FileSystem\x1a\x12.xenon.AdaptorName\"\x00\x12\x33\n\x0bgetLocation\x12\x11.xenon.FileSystem\x1a\x0f.xenon.Location\"\x00\x12\x37\n\rgetProperties\x12\x11.xenon.FileSystem\x1a\x11.xenon.Properties\"\x00\x12\x37\n\x11\x63reateDirectories\x12\x12.xenon.PathRequest\x1a\x0c.xenon.Empty\"\x00\x12\x35\n\x0f\x63reateDirectory\x12\x12.xenon.PathRequest\x1a\x0c.xenon.Empty\"\x00\x12\x30\n\ncreateFile\x12\x12.xenon.PathRequest\x1a\x0c.xenon.Empty\"\x00\x12\x46\n\x12\x63reateSymbolicLink\x12 .xenon.CreateSymbolicLinkRequest\x1a\x0c.xenon.Empty\"\x00\x12\x32\n\x04\x63opy\x12\x12.xenon.CopyRequest\x1a\x14.xenon.CopyOperation\"\x00\x12:\n\x06\x63\x61ncel\x12\x1b.xenon.CopyOperationRequest\x1a\x11.xenon.CopyStatus\"\x00\x12=\n\tgetStatus\x12\x1b.xenon.CopyOperationRequest\x1a\x11.xenon.CopyStatus\"\x00\x12.\n\x06rename\x12\x14.xenon.RenameRequest\x1a\x0c.xenon.Empty\"\x00\x12.\n\x06\x64\x65lete\x12\x14.xenon.DeleteRequest\x1a\x0c.xenon.Empty\"\x00\x12)\n\x06\x65xists\x12\x12.xenon.PathRequest\x1a\t.xenon.Is\"\x00\x12\x43\n\x0creadFromFile\x12\x12.xenon.PathRequest\x1a\x1b.xenon.ReadFromFileResponse\"\x00\x30\x01\x12:\n\x0bwriteToFile\x12\x19.xenon.WriteToFileRequest\x1a\x0c.xenon.Empty\"\x00(\x01\x12<\n\x0c\x61ppendToFile\x12\x1a.xenon.AppendToFileRequest\x1a\x0c.xenon.Empty\"\x00(\x01\x12\x35\n\x04list\x12\x12.xenon.ListRequest\x1a\x15.xenon.PathAttributes\"\x00\x30\x01\x12<\n\rgetAttributes\x12\x12.xenon.PathRequest\x1a\x15.xenon.PathAttributes\"\x00\x12\x37\n\x13getWorkingDirectory\x12\x11.xenon.FileSystem\x1a\x0b.xenon.Path\"\x00\x12\x39\n\x13setWorkingDirectory\x12\x12.xenon.PathRequest\x1a\x0c.xenon.Empty\"\x00\x12P\n\x17setPosixFilePermissions\x12%.xenon.SetPosixFilePermissionsRequest\x1a\x0c.xenon.Empty\"\x00\x12\x35\n\x10readSymbolicLink\x12\x12.xenon.PathRequest\x1a\x0b.xenon.Path\"\x00\x12H\n\x10getPathSeparator\x12\x11.xenon.FileSystem\x1a\x1f.xenon.GetPathSeparatorResponse\"\x00\x12(\n\x06isOpen\x12\x11.xenon.FileSystem\x1a\t.xenon.Is\"\x00\x12*\n\x05\x63lose\x12\x11.xenon.FileSystem\x1a\x0c.xenon.Empty\"\x00\x12\x41\n\rwaitUntilDone\x12\x1b.xenon.WaitUntilDoneRequest\x1a\x11.xenon.CopyStatus\"\x00\x12\x36\n\x10localFileSystems\x12\x0c.xenon.Empty\x1a\x12.xenon.FileSystems\"\x00\x12\x35\n\x0flistFileSystems\x12\x0c.xenon.Empty\x1a\x12.xenon.FileSystems\"\x00\x32\xc9\x0b\n\x10SchedulerService\x12M\n\x16getAdaptorDescriptions\x12\x0c.xenon.Empty\x1a#.xenon.SchedulerAdaptorDescriptions\"\x00\x12\x36\n\x0fgetAdaptorNames\x12\x0c.xenon.Empty\x1a\x13.xenon.AdaptorNames\"\x00\x12Q\n\x15getAdaptorDescription\x12\x12.xenon.AdaptorName\x1a\".xenon.SchedulerAdaptorDescription\"\x00\x12;\n\x06\x63reate\x12\x1d.xenon.CreateSchedulerRequest\x1a\x10.xenon.Scheduler\"\x00\x12\x38\n\x0egetAdaptorName\x12\x10.xenon.Scheduler\x1a\x12.xenon.AdaptorName\"\x00\x12\x32\n\x0bgetLocation\x12\x10.xenon.Scheduler\x1a\x0f.xenon.Location\"\x00\x12\x36\n\rgetProperties\x12\x10.xenon.Scheduler\x1a\x11.xenon.Properties\"\x00\x12<\n\x0esubmitBatchJob\x12\x1c.xenon.SubmitBatchJobRequest\x1a\n.xenon.Job\"\x00\x12\x65\n\x14submitInteractiveJob\x12\".xenon.SubmitInteractiveJobRequest\x1a#.xenon.SubmitInteractiveJobResponse\"\x00(\x01\x30\x01\x12\x32\n\rgetQueueNames\x12\x10.xenon.Scheduler\x1a\r.xenon.Queues\"\x00\x12\x37\n\x13getDefaultQueueName\x12\x10.xenon.Scheduler\x1a\x0c.xenon.Queue\"\x00\x12\x33\n\x07getJobs\x12\x19.xenon.SchedulerAndQueues\x1a\x0b.xenon.Jobs\"\x00\x12\x35\n\x0cgetJobStatus\x12\x11.xenon.JobRequest\x1a\x10.xenon.JobStatus\"\x00\x12O\n\x0egetJobStatuses\x12\x1c.xenon.GetJobStatusesRequest\x1a\x1d.xenon.GetJobStatusesResponse\"\x00\x12\x44\n\x0egetQueueStatus\x12\x1c.xenon.GetQueueStatusRequest\x1a\x12.xenon.QueueStatus\"\x00\x12\x45\n\x10getQueueStatuses\x12\x19.xenon.SchedulerAndQueues\x1a\x14.xenon.QueueStatuses\"\x00\x12\x37\n\rwaitUntilDone\x12\x12.xenon.WaitRequest\x1a\x10.xenon.JobStatus\"\x00\x12:\n\x10waitUntilRunning\x12\x12.xenon.WaitRequest\x1a\x10.xenon.JobStatus\"\x00\x12\'\n\x06isOpen\x12\x10.xenon.Scheduler\x1a\t.xenon.Is\"\x00\x12\x32\n\tcancelJob\x12\x11.xenon.JobRequest\x1a\x10.xenon.JobStatus\"\x00\x12\x36\n\rgetFileSystem\x12\x10.xenon.Scheduler\x1a\x11.xenon.FileSystem\"\x00\x12)\n\x05\x63lose\x12\x10.xenon.Scheduler\x1a\x0c.xenon.Empty\"\x00\x12\x32\n\x0elocalScheduler\x12\x0c.xenon.Empty\x1a\x10.xenon.Scheduler\"\x00\x12\x33\n\x0elistSchedulers\x12\x0c.xenon.Empty\x1a\x11.xenon.Schedulers\"\x00\x42*\n\x1cnl.esciencecenter.xenon.grpcB\nXenonProtob\x06proto3')
)

_POSIXFILEPERMISSION = _descriptor.EnumDescriptor(
  name='PosixFilePermission',
  full_name='xenon.PosixFilePermission',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_READ', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_WRITE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_EXECUTE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_READ', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_WRITE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_EXECUTE', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_READ', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_WRITE', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_EXECUTE', index=9, number=9,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6851,
  serialized_end=7041,
)
_sym_db.RegisterEnumDescriptor(_POSIXFILEPERMISSION)

PosixFilePermission = enum_type_wrapper.EnumTypeWrapper(_POSIXFILEPERMISSION)
NONE = 0
OWNER_READ = 1
OWNER_WRITE = 2
OWNER_EXECUTE = 3
GROUP_READ = 4
GROUP_WRITE = 5
GROUP_EXECUTE = 6
OTHERS_READ = 7
OTHERS_WRITE = 8
OTHERS_EXECUTE = 9


_PROPERTYDESCRIPTION_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='xenon.PropertyDescription.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STRING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BOOLEAN', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTEGER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOUBLE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LONG', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SIZE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NATURAL', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=292,
  serialized_end=381,
)
_sym_db.RegisterEnumDescriptor(_PROPERTYDESCRIPTION_TYPE)

_COPYREQUEST_COPYMODE = _descriptor.EnumDescriptor(
  name='CopyMode',
  full_name='xenon.CopyRequest.CopyMode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CREATE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REPLACE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IGNORE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2352,
  serialized_end=2399,
)
_sym_db.RegisterEnumDescriptor(_COPYREQUEST_COPYMODE)

_COPYSTATUS_ERRORTYPE = _descriptor.EnumDescriptor(
  name='ErrorType',
  full_name='xenon.CopyStatus.ErrorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CANCELLED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALREADY_EXISTS', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_CONNECTED', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='XENON', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3127,
  serialized_end=3228,
)
_sym_db.RegisterEnumDescriptor(_COPYSTATUS_ERRORTYPE)

_JOBSTATUS_ERRORTYPE = _descriptor.EnumDescriptor(
  name='ErrorType',
  full_name='xenon.JobStatus.ErrorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CANCELLED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_CONNECTED', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='XENON', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IO', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHER', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6168,
  serialized_end=6268,
)
_sym_db.RegisterEnumDescriptor(_JOBSTATUS_ERRORTYPE)

_QUEUESTATUS_ERRORTYPE = _descriptor.EnumDescriptor(
  name='ErrorType',
  full_name='xenon.QueueStatus.ErrorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_CONNECTED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='XENON', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IO', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHER', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6598,
  serialized_end=6683,
)
_sym_db.RegisterEnumDescriptor(_QUEUESTATUS_ERRORTYPE)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='xenon.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=34,
  serialized_end=41,
)


_PROPERTIES_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.Properties.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.Properties.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.Properties.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=112,
  serialized_end=161,
)

_PROPERTIES = _descriptor.Descriptor(
  name='Properties',
  full_name='xenon.Properties',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.Properties.properties', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_PROPERTIES_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=43,
  serialized_end=161,
)


_PROPERTYDESCRIPTION = _descriptor.Descriptor(
  name='PropertyDescription',
  full_name='xenon.PropertyDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.PropertyDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.PropertyDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='default_value', full_name='xenon.PropertyDescription.default_value', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='xenon.PropertyDescription.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _PROPERTYDESCRIPTION_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=164,
  serialized_end=381,
)


_PROPERTYDESCRIPTIONS = _descriptor.Descriptor(
  name='PropertyDescriptions',
  full_name='xenon.PropertyDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.PropertyDescriptions.properties', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=383,
  serialized_end=453,
)


_SCHEDULERADAPTORDESCRIPTION = _descriptor.Descriptor(
  name='SchedulerAdaptorDescription',
  full_name='xenon.SchedulerAdaptorDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.SchedulerAdaptorDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.SchedulerAdaptorDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supported_locations', full_name='xenon.SchedulerAdaptorDescription.supported_locations', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supported_properties', full_name='xenon.SchedulerAdaptorDescription.supported_properties', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_embedded', full_name='xenon.SchedulerAdaptorDescription.is_embedded', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supports_interactive', full_name='xenon.SchedulerAdaptorDescription.supports_interactive', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supports_batch', full_name='xenon.SchedulerAdaptorDescription.supports_batch', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uses_file_system', full_name='xenon.SchedulerAdaptorDescription.uses_file_system', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=456,
  serialized_end=708,
)


_SCHEDULERADAPTORDESCRIPTIONS = _descriptor.Descriptor(
  name='SchedulerAdaptorDescriptions',
  full_name='xenon.SchedulerAdaptorDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='descriptions', full_name='xenon.SchedulerAdaptorDescriptions.descriptions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=710,
  serialized_end=798,
)


_FILESYSTEMADAPTORDESCRIPTION = _descriptor.Descriptor(
  name='FileSystemAdaptorDescription',
  full_name='xenon.FileSystemAdaptorDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.FileSystemAdaptorDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.FileSystemAdaptorDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supported_locations', full_name='xenon.FileSystemAdaptorDescription.supported_locations', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supported_properties', full_name='xenon.FileSystemAdaptorDescription.supported_properties', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supports_third_party_copy', full_name='xenon.FileSystemAdaptorDescription.supports_third_party_copy', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='can_create_symboliclinks', full_name='xenon.FileSystemAdaptorDescription.can_create_symboliclinks', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='can_read_symboliclinks', full_name='xenon.FileSystemAdaptorDescription.can_read_symboliclinks', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_connectionless', full_name='xenon.FileSystemAdaptorDescription.is_connectionless', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=801,
  serialized_end=1081,
)


_FILESYSTEMADAPTORDESCRIPTIONS = _descriptor.Descriptor(
  name='FileSystemAdaptorDescriptions',
  full_name='xenon.FileSystemAdaptorDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='descriptions', full_name='xenon.FileSystemAdaptorDescriptions.descriptions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1083,
  serialized_end=1173,
)


_ADAPTORNAME = _descriptor.Descriptor(
  name='AdaptorName',
  full_name='xenon.AdaptorName',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.AdaptorName.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1175,
  serialized_end=1202,
)


_ADAPTORNAMES = _descriptor.Descriptor(
  name='AdaptorNames',
  full_name='xenon.AdaptorNames',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.AdaptorNames.name', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1204,
  serialized_end=1232,
)


_CERTIFICATECREDENTIAL = _descriptor.Descriptor(
  name='CertificateCredential',
  full_name='xenon.CertificateCredential',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certfile', full_name='xenon.CertificateCredential.certfile', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='passphrase', full_name='xenon.CertificateCredential.passphrase', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='username', full_name='xenon.CertificateCredential.username', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1234,
  serialized_end=1313,
)


_PASSWORDCREDENTIAL = _descriptor.Descriptor(
  name='PasswordCredential',
  full_name='xenon.PasswordCredential',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='xenon.PasswordCredential.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='xenon.PasswordCredential.password', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1315,
  serialized_end=1371,
)


_DEFAULTCREDENTIAL = _descriptor.Descriptor(
  name='DefaultCredential',
  full_name='xenon.DefaultCredential',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='xenon.DefaultCredential.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1373,
  serialized_end=1410,
)


_LOCATION = _descriptor.Descriptor(
  name='Location',
  full_name='xenon.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='location', full_name='xenon.Location.location', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1412,
  serialized_end=1440,
)


_CREATEFILESYSTEMREQUEST_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.CreateFileSystemRequest.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.CreateFileSystemRequest.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.CreateFileSystemRequest.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=112,
  serialized_end=161,
)

_CREATEFILESYSTEMREQUEST = _descriptor.Descriptor(
  name='CreateFileSystemRequest',
  full_name='xenon.CreateFileSystemRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='adaptor', full_name='xenon.CreateFileSystemRequest.adaptor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='location', full_name='xenon.CreateFileSystemRequest.location', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.CreateFileSystemRequest.properties', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_credential', full_name='xenon.CreateFileSystemRequest.certificate_credential', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password_credential', full_name='xenon.CreateFileSystemRequest.password_credential', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='default_credential', full_name='xenon.CreateFileSystemRequest.default_credential', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CREATEFILESYSTEMREQUEST_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='credential', full_name='xenon.CreateFileSystemRequest.credential',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1443,
  serialized_end=1814,
)


_FILESYSTEM = _descriptor.Descriptor(
  name='FileSystem',
  full_name='xenon.FileSystem',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.FileSystem.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1816,
  serialized_end=1840,
)


_FILESYSTEMS = _descriptor.Descriptor(
  name='FileSystems',
  full_name='xenon.FileSystems',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystems', full_name='xenon.FileSystems.filesystems', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1842,
  serialized_end=1895,
)


_PATH = _descriptor.Descriptor(
  name='Path',
  full_name='xenon.Path',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.Path.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='separator', full_name='xenon.Path.separator', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1897,
  serialized_end=1936,
)


_PATHREQUEST = _descriptor.Descriptor(
  name='PathRequest',
  full_name='xenon.PathRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.PathRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.PathRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1938,
  serialized_end=2017,
)


_DELETEREQUEST = _descriptor.Descriptor(
  name='DeleteRequest',
  full_name='xenon.DeleteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.DeleteRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.DeleteRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='recursive', full_name='xenon.DeleteRequest.recursive', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2019,
  serialized_end=2119,
)


_COPYREQUEST = _descriptor.Descriptor(
  name='CopyRequest',
  full_name='xenon.CopyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.CopyRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='source', full_name='xenon.CopyRequest.source', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='destination_filesystem', full_name='xenon.CopyRequest.destination_filesystem', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='destination', full_name='xenon.CopyRequest.destination', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mode', full_name='xenon.CopyRequest.mode', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='recursive', full_name='xenon.CopyRequest.recursive', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _COPYREQUEST_COPYMODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2122,
  serialized_end=2399,
)


_RENAMEREQUEST = _descriptor.Descriptor(
  name='RenameRequest',
  full_name='xenon.RenameRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.RenameRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='source', full_name='xenon.RenameRequest.source', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target', full_name='xenon.RenameRequest.target', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2401,
  serialized_end=2513,
)


_CREATESYMBOLICLINKREQUEST = _descriptor.Descriptor(
  name='CreateSymbolicLinkRequest',
  full_name='xenon.CreateSymbolicLinkRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.CreateSymbolicLinkRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='link', full_name='xenon.CreateSymbolicLinkRequest.link', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target', full_name='xenon.CreateSymbolicLinkRequest.target', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2515,
  serialized_end=2637,
)


_COPYOPERATION = _descriptor.Descriptor(
  name='CopyOperation',
  full_name='xenon.CopyOperation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.CopyOperation.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2639,
  serialized_end=2666,
)


_COPYOPERATIONREQUEST = _descriptor.Descriptor(
  name='CopyOperationRequest',
  full_name='xenon.CopyOperationRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.CopyOperationRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='copy_operation', full_name='xenon.CopyOperationRequest.copy_operation', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2668,
  serialized_end=2775,
)


_WAITUNTILDONEREQUEST = _descriptor.Descriptor(
  name='WaitUntilDoneRequest',
  full_name='xenon.WaitUntilDoneRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.WaitUntilDoneRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='copy_operation', full_name='xenon.WaitUntilDoneRequest.copy_operation', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='xenon.WaitUntilDoneRequest.timeout', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2777,
  serialized_end=2901,
)


_COPYSTATUS = _descriptor.Descriptor(
  name='CopyStatus',
  full_name='xenon.CopyStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='copy_operation', full_name='xenon.CopyStatus.copy_operation', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytes_copied', full_name='xenon.CopyStatus.bytes_copied', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytes_to_copy', full_name='xenon.CopyStatus.bytes_to_copy', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='done', full_name='xenon.CopyStatus.done', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='running', full_name='xenon.CopyStatus.running', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='xenon.CopyStatus.state', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_message', full_name='xenon.CopyStatus.error_message', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_type', full_name='xenon.CopyStatus.error_type', index=7,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _COPYSTATUS_ERRORTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2904,
  serialized_end=3228,
)


_PATHATTRIBUTES = _descriptor.Descriptor(
  name='PathAttributes',
  full_name='xenon.PathAttributes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.PathAttributes.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='creation_time', full_name='xenon.PathAttributes.creation_time', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='xenon.PathAttributes.group', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_directory', full_name='xenon.PathAttributes.is_directory', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_executable', full_name='xenon.PathAttributes.is_executable', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_hidden', full_name='xenon.PathAttributes.is_hidden', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_other', full_name='xenon.PathAttributes.is_other', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_readable', full_name='xenon.PathAttributes.is_readable', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_regular', full_name='xenon.PathAttributes.is_regular', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_symbolic_link', full_name='xenon.PathAttributes.is_symbolic_link', index=9,
      number=10, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_writable', full_name='xenon.PathAttributes.is_writable', index=10,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_access_time', full_name='xenon.PathAttributes.last_access_time', index=11,
      number=12, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_modified_time', full_name='xenon.PathAttributes.last_modified_time', index=12,
      number=13, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='owner', full_name='xenon.PathAttributes.owner', index=13,
      number=14, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='permissions', full_name='xenon.PathAttributes.permissions', index=14,
      number=15, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size', full_name='xenon.PathAttributes.size', index=15,
      number=16, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3231,
  serialized_end=3614,
)


_SETPOSIXFILEPERMISSIONSREQUEST = _descriptor.Descriptor(
  name='SetPosixFilePermissionsRequest',
  full_name='xenon.SetPosixFilePermissionsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.SetPosixFilePermissionsRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.SetPosixFilePermissionsRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='permissions', full_name='xenon.SetPosixFilePermissionsRequest.permissions', index=2,
      number=3, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3617,
  serialized_end=3764,
)


_READFROMFILERESPONSE = _descriptor.Descriptor(
  name='ReadFromFileResponse',
  full_name='xenon.ReadFromFileResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='buffer', full_name='xenon.ReadFromFileResponse.buffer', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3766,
  serialized_end=3804,
)


_WRITETOFILEREQUEST = _descriptor.Descriptor(
  name='WriteToFileRequest',
  full_name='xenon.WriteToFileRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.WriteToFileRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.WriteToFileRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='buffer', full_name='xenon.WriteToFileRequest.buffer', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size', full_name='xenon.WriteToFileRequest.size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3806,
  serialized_end=3922,
)


_APPENDTOFILEREQUEST = _descriptor.Descriptor(
  name='AppendToFileRequest',
  full_name='xenon.AppendToFileRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.AppendToFileRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.AppendToFileRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='buffer', full_name='xenon.AppendToFileRequest.buffer', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3924,
  serialized_end=4027,
)


_LISTREQUEST = _descriptor.Descriptor(
  name='ListRequest',
  full_name='xenon.ListRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.ListRequest.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dir', full_name='xenon.ListRequest.dir', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='recursive', full_name='xenon.ListRequest.recursive', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4029,
  serialized_end=4126,
)


_GETPATHSEPARATORRESPONSE = _descriptor.Descriptor(
  name='GetPathSeparatorResponse',
  full_name='xenon.GetPathSeparatorResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='separator', full_name='xenon.GetPathSeparatorResponse.separator', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4128,
  serialized_end=4173,
)


_CREATESCHEDULERREQUEST_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.CreateSchedulerRequest.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.CreateSchedulerRequest.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.CreateSchedulerRequest.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=112,
  serialized_end=161,
)

_CREATESCHEDULERREQUEST = _descriptor.Descriptor(
  name='CreateSchedulerRequest',
  full_name='xenon.CreateSchedulerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='adaptor', full_name='xenon.CreateSchedulerRequest.adaptor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='location', full_name='xenon.CreateSchedulerRequest.location', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.CreateSchedulerRequest.properties', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_credential', full_name='xenon.CreateSchedulerRequest.certificate_credential', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password_credential', full_name='xenon.CreateSchedulerRequest.password_credential', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='default_credential', full_name='xenon.CreateSchedulerRequest.default_credential', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CREATESCHEDULERREQUEST_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='credential', full_name='xenon.CreateSchedulerRequest.credential',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=4176,
  serialized_end=4545,
)


_SCHEDULER = _descriptor.Descriptor(
  name='Scheduler',
  full_name='xenon.Scheduler',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.Scheduler.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4547,
  serialized_end=4570,
)


_SCHEDULERS = _descriptor.Descriptor(
  name='Schedulers',
  full_name='xenon.Schedulers',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='schedulers', full_name='xenon.Schedulers.schedulers', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4572,
  serialized_end=4622,
)


_JOBDESCRIPTION_ENVIRONMENTENTRY = _descriptor.Descriptor(
  name='EnvironmentEntry',
  full_name='xenon.JobDescription.EnvironmentEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobDescription.EnvironmentEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobDescription.EnvironmentEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4989,
  serialized_end=5039,
)

_JOBDESCRIPTION_OPTIONSENTRY = _descriptor.Descriptor(
  name='OptionsEntry',
  full_name='xenon.JobDescription.OptionsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobDescription.OptionsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobDescription.OptionsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5041,
  serialized_end=5087,
)

_JOBDESCRIPTION = _descriptor.Descriptor(
  name='JobDescription',
  full_name='xenon.JobDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='executable', full_name='xenon.JobDescription.executable', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='arguments', full_name='xenon.JobDescription.arguments', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='working_directory', full_name='xenon.JobDescription.working_directory', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='environment', full_name='xenon.JobDescription.environment', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queue_name', full_name='xenon.JobDescription.queue_name', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_runtime', full_name='xenon.JobDescription.max_runtime', index=5,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='node_count', full_name='xenon.JobDescription.node_count', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='processes_per_node', full_name='xenon.JobDescription.processes_per_node', index=7,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_single_process', full_name='xenon.JobDescription.start_single_process', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr', full_name='xenon.JobDescription.stderr', index=9,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdin', full_name='xenon.JobDescription.stdin', index=10,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdout', full_name='xenon.JobDescription.stdout', index=11,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='xenon.JobDescription.options', index=12,
      number=13, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_JOBDESCRIPTION_ENVIRONMENTENTRY, _JOBDESCRIPTION_OPTIONSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4625,
  serialized_end=5087,
)


_SUBMITBATCHJOBREQUEST = _descriptor.Descriptor(
  name='SubmitBatchJobRequest',
  full_name='xenon.SubmitBatchJobRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SubmitBatchJobRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.SubmitBatchJobRequest.description', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5089,
  serialized_end=5193,
)


_SUBMITINTERACTIVEJOBREQUEST = _descriptor.Descriptor(
  name='SubmitInteractiveJobRequest',
  full_name='xenon.SubmitInteractiveJobRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SubmitInteractiveJobRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.SubmitInteractiveJobRequest.description', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdin', full_name='xenon.SubmitInteractiveJobRequest.stdin', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5195,
  serialized_end=5320,
)


_JOB = _descriptor.Descriptor(
  name='Job',
  full_name='xenon.Job',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.Job.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5322,
  serialized_end=5339,
)


_JOBREQUEST = _descriptor.Descriptor(
  name='JobRequest',
  full_name='xenon.JobRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.JobRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.JobRequest.job', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5341,
  serialized_end=5415,
)


_JOBS = _descriptor.Descriptor(
  name='Jobs',
  full_name='xenon.Jobs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='jobs', full_name='xenon.Jobs.jobs', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5417,
  serialized_end=5449,
)


_GETJOBSTATUSESREQUEST = _descriptor.Descriptor(
  name='GetJobStatusesRequest',
  full_name='xenon.GetJobStatusesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.GetJobStatusesRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='jobs', full_name='xenon.GetJobStatusesRequest.jobs', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5451,
  serialized_end=5537,
)


_WAITREQUEST = _descriptor.Descriptor(
  name='WaitRequest',
  full_name='xenon.WaitRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.WaitRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.WaitRequest.job', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='xenon.WaitRequest.timeout', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5539,
  serialized_end=5631,
)


_QUEUE = _descriptor.Descriptor(
  name='Queue',
  full_name='xenon.Queue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.Queue.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5633,
  serialized_end=5654,
)


_QUEUES = _descriptor.Descriptor(
  name='Queues',
  full_name='xenon.Queues',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.Queues.name', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5656,
  serialized_end=5678,
)


_SCHEDULERANDQUEUES = _descriptor.Descriptor(
  name='SchedulerAndQueues',
  full_name='xenon.SchedulerAndQueues',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SchedulerAndQueues.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queues', full_name='xenon.SchedulerAndQueues.queues', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5680,
  serialized_end=5753,
)


_GETQUEUESTATUSREQUEST = _descriptor.Descriptor(
  name='GetQueueStatusRequest',
  full_name='xenon.GetQueueStatusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.GetQueueStatusRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queue', full_name='xenon.GetQueueStatusRequest.queue', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5755,
  serialized_end=5830,
)


_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY = _descriptor.Descriptor(
  name='SchedulerSpecificInformationEntry',
  full_name='xenon.JobStatus.SchedulerSpecificInformationEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobStatus.SchedulerSpecificInformationEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobStatus.SchedulerSpecificInformationEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6099,
  serialized_end=6166,
)

_JOBSTATUS = _descriptor.Descriptor(
  name='JobStatus',
  full_name='xenon.JobStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.JobStatus.job', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='xenon.JobStatus.state', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='running', full_name='xenon.JobStatus.running', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='done', full_name='xenon.JobStatus.done', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scheduler_specific_information', full_name='xenon.JobStatus.scheduler_specific_information', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exit_code', full_name='xenon.JobStatus.exit_code', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_message', full_name='xenon.JobStatus.error_message', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_type', full_name='xenon.JobStatus.error_type', index=7,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY, ],
  enum_types=[
    _JOBSTATUS_ERRORTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5833,
  serialized_end=6268,
)


_GETJOBSTATUSESRESPONSE = _descriptor.Descriptor(
  name='GetJobStatusesResponse',
  full_name='xenon.GetJobStatusesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statuses', full_name='xenon.GetJobStatusesResponse.statuses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6270,
  serialized_end=6330,
)


_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY = _descriptor.Descriptor(
  name='SchedulerSpecificInformationEntry',
  full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6099,
  serialized_end=6166,
)

_QUEUESTATUS = _descriptor.Descriptor(
  name='QueueStatus',
  full_name='xenon.QueueStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.QueueStatus.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scheduler_specific_information', full_name='xenon.QueueStatus.scheduler_specific_information', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_message', full_name='xenon.QueueStatus.error_message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_type', full_name='xenon.QueueStatus.error_type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY, ],
  enum_types=[
    _QUEUESTATUS_ERRORTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6333,
  serialized_end=6683,
)


_QUEUESTATUSES = _descriptor.Descriptor(
  name='QueueStatuses',
  full_name='xenon.QueueStatuses',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statuses', full_name='xenon.QueueStatuses.statuses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6685,
  serialized_end=6738,
)


_SUBMITINTERACTIVEJOBRESPONSE = _descriptor.Descriptor(
  name='SubmitInteractiveJobResponse',
  full_name='xenon.SubmitInteractiveJobResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.SubmitInteractiveJobResponse.job', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdout', full_name='xenon.SubmitInteractiveJobResponse.stdout', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr', full_name='xenon.SubmitInteractiveJobResponse.stderr', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6740,
  serialized_end=6827,
)


_IS = _descriptor.Descriptor(
  name='Is',
  full_name='xenon.Is',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.Is.value', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6829,
  serialized_end=6848,
)

_PROPERTIES_PROPERTIESENTRY.containing_type = _PROPERTIES
_PROPERTIES.fields_by_name['properties'].message_type = _PROPERTIES_PROPERTIESENTRY
_PROPERTYDESCRIPTION.fields_by_name['type'].enum_type = _PROPERTYDESCRIPTION_TYPE
_PROPERTYDESCRIPTION_TYPE.containing_type = _PROPERTYDESCRIPTION
_PROPERTYDESCRIPTIONS.fields_by_name['properties'].message_type = _PROPERTYDESCRIPTION
_SCHEDULERADAPTORDESCRIPTION.fields_by_name['supported_properties'].message_type = _PROPERTYDESCRIPTION
_SCHEDULERADAPTORDESCRIPTIONS.fields_by_name['descriptions'].message_type = _SCHEDULERADAPTORDESCRIPTION
_FILESYSTEMADAPTORDESCRIPTION.fields_by_name['supported_properties'].message_type = _PROPERTYDESCRIPTION
_FILESYSTEMADAPTORDESCRIPTIONS.fields_by_name['descriptions'].message_type = _FILESYSTEMADAPTORDESCRIPTION
_CREATEFILESYSTEMREQUEST_PROPERTIESENTRY.containing_type = _CREATEFILESYSTEMREQUEST
_CREATEFILESYSTEMREQUEST.fields_by_name['properties'].message_type = _CREATEFILESYSTEMREQUEST_PROPERTIESENTRY
_CREATEFILESYSTEMREQUEST.fields_by_name['certificate_credential'].message_type = _CERTIFICATECREDENTIAL
_CREATEFILESYSTEMREQUEST.fields_by_name['password_credential'].message_type = _PASSWORDCREDENTIAL
_CREATEFILESYSTEMREQUEST.fields_by_name['default_credential'].message_type = _DEFAULTCREDENTIAL
_CREATEFILESYSTEMREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATEFILESYSTEMREQUEST.fields_by_name['certificate_credential'])
_CREATEFILESYSTEMREQUEST.fields_by_name['certificate_credential'].containing_oneof = _CREATEFILESYSTEMREQUEST.oneofs_by_name['credential']
_CREATEFILESYSTEMREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATEFILESYSTEMREQUEST.fields_by_name['password_credential'])
_CREATEFILESYSTEMREQUEST.fields_by_name['password_credential'].containing_oneof = _CREATEFILESYSTEMREQUEST.oneofs_by_name['credential']
_CREATEFILESYSTEMREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATEFILESYSTEMREQUEST.fields_by_name['default_credential'])
_CREATEFILESYSTEMREQUEST.fields_by_name['default_credential'].containing_oneof = _CREATEFILESYSTEMREQUEST.oneofs_by_name['credential']
_FILESYSTEMS.fields_by_name['filesystems'].message_type = _FILESYSTEM
_PATHREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_PATHREQUEST.fields_by_name['path'].message_type = _PATH
_DELETEREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_DELETEREQUEST.fields_by_name['path'].message_type = _PATH
_COPYREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_COPYREQUEST.fields_by_name['source'].message_type = _PATH
_COPYREQUEST.fields_by_name['destination_filesystem'].message_type = _FILESYSTEM
_COPYREQUEST.fields_by_name['destination'].message_type = _PATH
_COPYREQUEST.fields_by_name['mode'].enum_type = _COPYREQUEST_COPYMODE
_COPYREQUEST_COPYMODE.containing_type = _COPYREQUEST
_RENAMEREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_RENAMEREQUEST.fields_by_name['source'].message_type = _PATH
_RENAMEREQUEST.fields_by_name['target'].message_type = _PATH
_CREATESYMBOLICLINKREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_CREATESYMBOLICLINKREQUEST.fields_by_name['link'].message_type = _PATH
_CREATESYMBOLICLINKREQUEST.fields_by_name['target'].message_type = _PATH
_COPYOPERATIONREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_COPYOPERATIONREQUEST.fields_by_name['copy_operation'].message_type = _COPYOPERATION
_WAITUNTILDONEREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_WAITUNTILDONEREQUEST.fields_by_name['copy_operation'].message_type = _COPYOPERATION
_COPYSTATUS.fields_by_name['copy_operation'].message_type = _COPYOPERATION
_COPYSTATUS.fields_by_name['error_type'].enum_type = _COPYSTATUS_ERRORTYPE
_COPYSTATUS_ERRORTYPE.containing_type = _COPYSTATUS
_PATHATTRIBUTES.fields_by_name['path'].message_type = _PATH
_PATHATTRIBUTES.fields_by_name['permissions'].enum_type = _POSIXFILEPERMISSION
_SETPOSIXFILEPERMISSIONSREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_SETPOSIXFILEPERMISSIONSREQUEST.fields_by_name['path'].message_type = _PATH
_SETPOSIXFILEPERMISSIONSREQUEST.fields_by_name['permissions'].enum_type = _POSIXFILEPERMISSION
_WRITETOFILEREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_WRITETOFILEREQUEST.fields_by_name['path'].message_type = _PATH
_APPENDTOFILEREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_APPENDTOFILEREQUEST.fields_by_name['path'].message_type = _PATH
_LISTREQUEST.fields_by_name['filesystem'].message_type = _FILESYSTEM
_LISTREQUEST.fields_by_name['dir'].message_type = _PATH
_CREATESCHEDULERREQUEST_PROPERTIESENTRY.containing_type = _CREATESCHEDULERREQUEST
_CREATESCHEDULERREQUEST.fields_by_name['properties'].message_type = _CREATESCHEDULERREQUEST_PROPERTIESENTRY
_CREATESCHEDULERREQUEST.fields_by_name['certificate_credential'].message_type = _CERTIFICATECREDENTIAL
_CREATESCHEDULERREQUEST.fields_by_name['password_credential'].message_type = _PASSWORDCREDENTIAL
_CREATESCHEDULERREQUEST.fields_by_name['default_credential'].message_type = _DEFAULTCREDENTIAL
_CREATESCHEDULERREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATESCHEDULERREQUEST.fields_by_name['certificate_credential'])
_CREATESCHEDULERREQUEST.fields_by_name['certificate_credential'].containing_oneof = _CREATESCHEDULERREQUEST.oneofs_by_name['credential']
_CREATESCHEDULERREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATESCHEDULERREQUEST.fields_by_name['password_credential'])
_CREATESCHEDULERREQUEST.fields_by_name['password_credential'].containing_oneof = _CREATESCHEDULERREQUEST.oneofs_by_name['credential']
_CREATESCHEDULERREQUEST.oneofs_by_name['credential'].fields.append(
  _CREATESCHEDULERREQUEST.fields_by_name['default_credential'])
_CREATESCHEDULERREQUEST.fields_by_name['default_credential'].containing_oneof = _CREATESCHEDULERREQUEST.oneofs_by_name['credential']
_SCHEDULERS.fields_by_name['schedulers'].message_type = _SCHEDULER
_JOBDESCRIPTION_ENVIRONMENTENTRY.containing_type = _JOBDESCRIPTION
_JOBDESCRIPTION_OPTIONSENTRY.containing_type = _JOBDESCRIPTION
_JOBDESCRIPTION.fields_by_name['environment'].message_type = _JOBDESCRIPTION_ENVIRONMENTENTRY
_JOBDESCRIPTION.fields_by_name['options'].message_type = _JOBDESCRIPTION_OPTIONSENTRY
_SUBMITBATCHJOBREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_SUBMITBATCHJOBREQUEST.fields_by_name['description'].message_type = _JOBDESCRIPTION
_SUBMITINTERACTIVEJOBREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_SUBMITINTERACTIVEJOBREQUEST.fields_by_name['description'].message_type = _JOBDESCRIPTION
_JOBREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_JOBREQUEST.fields_by_name['job'].message_type = _JOB
_JOBS.fields_by_name['jobs'].message_type = _JOB
_GETJOBSTATUSESREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_GETJOBSTATUSESREQUEST.fields_by_name['jobs'].message_type = _JOB
_WAITREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_WAITREQUEST.fields_by_name['job'].message_type = _JOB
_SCHEDULERANDQUEUES.fields_by_name['scheduler'].message_type = _SCHEDULER
_GETQUEUESTATUSREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.containing_type = _JOBSTATUS
_JOBSTATUS.fields_by_name['job'].message_type = _JOB
_JOBSTATUS.fields_by_name['scheduler_specific_information'].message_type = _JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY
_JOBSTATUS.fields_by_name['error_type'].enum_type = _JOBSTATUS_ERRORTYPE
_JOBSTATUS_ERRORTYPE.containing_type = _JOBSTATUS
_GETJOBSTATUSESRESPONSE.fields_by_name['statuses'].message_type = _JOBSTATUS
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.containing_type = _QUEUESTATUS
_QUEUESTATUS.fields_by_name['scheduler_specific_information'].message_type = _QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY
_QUEUESTATUS.fields_by_name['error_type'].enum_type = _QUEUESTATUS_ERRORTYPE
_QUEUESTATUS_ERRORTYPE.containing_type = _QUEUESTATUS
_QUEUESTATUSES.fields_by_name['statuses'].message_type = _QUEUESTATUS
_SUBMITINTERACTIVEJOBRESPONSE.fields_by_name['job'].message_type = _JOB
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['Properties'] = _PROPERTIES
DESCRIPTOR.message_types_by_name['PropertyDescription'] = _PROPERTYDESCRIPTION
DESCRIPTOR.message_types_by_name['PropertyDescriptions'] = _PROPERTYDESCRIPTIONS
DESCRIPTOR.message_types_by_name['SchedulerAdaptorDescription'] = _SCHEDULERADAPTORDESCRIPTION
DESCRIPTOR.message_types_by_name['SchedulerAdaptorDescriptions'] = _SCHEDULERADAPTORDESCRIPTIONS
DESCRIPTOR.message_types_by_name['FileSystemAdaptorDescription'] = _FILESYSTEMADAPTORDESCRIPTION
DESCRIPTOR.message_types_by_name['FileSystemAdaptorDescriptions'] = _FILESYSTEMADAPTORDESCRIPTIONS
DESCRIPTOR.message_types_by_name['AdaptorName'] = _ADAPTORNAME
DESCRIPTOR.message_types_by_name['AdaptorNames'] = _ADAPTORNAMES
DESCRIPTOR.message_types_by_name['CertificateCredential'] = _CERTIFICATECREDENTIAL
DESCRIPTOR.message_types_by_name['PasswordCredential'] = _PASSWORDCREDENTIAL
DESCRIPTOR.message_types_by_name['DefaultCredential'] = _DEFAULTCREDENTIAL
DESCRIPTOR.message_types_by_name['Location'] = _LOCATION
DESCRIPTOR.message_types_by_name['CreateFileSystemRequest'] = _CREATEFILESYSTEMREQUEST
DESCRIPTOR.message_types_by_name['FileSystem'] = _FILESYSTEM
DESCRIPTOR.message_types_by_name['FileSystems'] = _FILESYSTEMS
DESCRIPTOR.message_types_by_name['Path'] = _PATH
DESCRIPTOR.message_types_by_name['PathRequest'] = _PATHREQUEST
DESCRIPTOR.message_types_by_name['DeleteRequest'] = _DELETEREQUEST
DESCRIPTOR.message_types_by_name['CopyRequest'] = _COPYREQUEST
DESCRIPTOR.message_types_by_name['RenameRequest'] = _RENAMEREQUEST
DESCRIPTOR.message_types_by_name['CreateSymbolicLinkRequest'] = _CREATESYMBOLICLINKREQUEST
DESCRIPTOR.message_types_by_name['CopyOperation'] = _COPYOPERATION
DESCRIPTOR.message_types_by_name['CopyOperationRequest'] = _COPYOPERATIONREQUEST
DESCRIPTOR.message_types_by_name['WaitUntilDoneRequest'] = _WAITUNTILDONEREQUEST
DESCRIPTOR.message_types_by_name['CopyStatus'] = _COPYSTATUS
DESCRIPTOR.message_types_by_name['PathAttributes'] = _PATHATTRIBUTES
DESCRIPTOR.message_types_by_name['SetPosixFilePermissionsRequest'] = _SETPOSIXFILEPERMISSIONSREQUEST
DESCRIPTOR.message_types_by_name['ReadFromFileResponse'] = _READFROMFILERESPONSE
DESCRIPTOR.message_types_by_name['WriteToFileRequest'] = _WRITETOFILEREQUEST
DESCRIPTOR.message_types_by_name['AppendToFileRequest'] = _APPENDTOFILEREQUEST
DESCRIPTOR.message_types_by_name['ListRequest'] = _LISTREQUEST
DESCRIPTOR.message_types_by_name['GetPathSeparatorResponse'] = _GETPATHSEPARATORRESPONSE
DESCRIPTOR.message_types_by_name['CreateSchedulerRequest'] = _CREATESCHEDULERREQUEST
DESCRIPTOR.message_types_by_name['Scheduler'] = _SCHEDULER
DESCRIPTOR.message_types_by_name['Schedulers'] = _SCHEDULERS
DESCRIPTOR.message_types_by_name['JobDescription'] = _JOBDESCRIPTION
DESCRIPTOR.message_types_by_name['SubmitBatchJobRequest'] = _SUBMITBATCHJOBREQUEST
DESCRIPTOR.message_types_by_name['SubmitInteractiveJobRequest'] = _SUBMITINTERACTIVEJOBREQUEST
DESCRIPTOR.message_types_by_name['Job'] = _JOB
DESCRIPTOR.message_types_by_name['JobRequest'] = _JOBREQUEST
DESCRIPTOR.message_types_by_name['Jobs'] = _JOBS
DESCRIPTOR.message_types_by_name['GetJobStatusesRequest'] = _GETJOBSTATUSESREQUEST
DESCRIPTOR.message_types_by_name['WaitRequest'] = _WAITREQUEST
DESCRIPTOR.message_types_by_name['Queue'] = _QUEUE
DESCRIPTOR.message_types_by_name['Queues'] = _QUEUES
DESCRIPTOR.message_types_by_name['SchedulerAndQueues'] = _SCHEDULERANDQUEUES
DESCRIPTOR.message_types_by_name['GetQueueStatusRequest'] = _GETQUEUESTATUSREQUEST
DESCRIPTOR.message_types_by_name['JobStatus'] = _JOBSTATUS
DESCRIPTOR.message_types_by_name['GetJobStatusesResponse'] = _GETJOBSTATUSESRESPONSE
DESCRIPTOR.message_types_by_name['QueueStatus'] = _QUEUESTATUS
DESCRIPTOR.message_types_by_name['QueueStatuses'] = _QUEUESTATUSES
DESCRIPTOR.message_types_by_name['SubmitInteractiveJobResponse'] = _SUBMITINTERACTIVEJOBRESPONSE
DESCRIPTOR.message_types_by_name['Is'] = _IS
DESCRIPTOR.enum_types_by_name['PosixFilePermission'] = _POSIXFILEPERMISSION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Empty)
  ))
_sym_db.RegisterMessage(Empty)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _PROPERTIES_PROPERTIESENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.Properties.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _PROPERTIES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Properties)
  ))
_sym_db.RegisterMessage(Properties)
_sym_db.RegisterMessage(Properties.PropertiesEntry)

PropertyDescription = _reflection.GeneratedProtocolMessageType('PropertyDescription', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTYDESCRIPTION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PropertyDescription)
  ))
_sym_db.RegisterMessage(PropertyDescription)

PropertyDescriptions = _reflection.GeneratedProtocolMessageType('PropertyDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTYDESCRIPTIONS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PropertyDescriptions)
  ))
_sym_db.RegisterMessage(PropertyDescriptions)

SchedulerAdaptorDescription = _reflection.GeneratedProtocolMessageType('SchedulerAdaptorDescription', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERADAPTORDESCRIPTION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SchedulerAdaptorDescription)
  ))
_sym_db.RegisterMessage(SchedulerAdaptorDescription)

SchedulerAdaptorDescriptions = _reflection.GeneratedProtocolMessageType('SchedulerAdaptorDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERADAPTORDESCRIPTIONS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SchedulerAdaptorDescriptions)
  ))
_sym_db.RegisterMessage(SchedulerAdaptorDescriptions)

FileSystemAdaptorDescription = _reflection.GeneratedProtocolMessageType('FileSystemAdaptorDescription', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEMADAPTORDESCRIPTION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystemAdaptorDescription)
  ))
_sym_db.RegisterMessage(FileSystemAdaptorDescription)

FileSystemAdaptorDescriptions = _reflection.GeneratedProtocolMessageType('FileSystemAdaptorDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEMADAPTORDESCRIPTIONS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystemAdaptorDescriptions)
  ))
_sym_db.RegisterMessage(FileSystemAdaptorDescriptions)

AdaptorName = _reflection.GeneratedProtocolMessageType('AdaptorName', (_message.Message,), dict(
  DESCRIPTOR = _ADAPTORNAME,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.AdaptorName)
  ))
_sym_db.RegisterMessage(AdaptorName)

AdaptorNames = _reflection.GeneratedProtocolMessageType('AdaptorNames', (_message.Message,), dict(
  DESCRIPTOR = _ADAPTORNAMES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.AdaptorNames)
  ))
_sym_db.RegisterMessage(AdaptorNames)

CertificateCredential = _reflection.GeneratedProtocolMessageType('CertificateCredential', (_message.Message,), dict(
  DESCRIPTOR = _CERTIFICATECREDENTIAL,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CertificateCredential)
  ))
_sym_db.RegisterMessage(CertificateCredential)

PasswordCredential = _reflection.GeneratedProtocolMessageType('PasswordCredential', (_message.Message,), dict(
  DESCRIPTOR = _PASSWORDCREDENTIAL,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PasswordCredential)
  ))
_sym_db.RegisterMessage(PasswordCredential)

DefaultCredential = _reflection.GeneratedProtocolMessageType('DefaultCredential', (_message.Message,), dict(
  DESCRIPTOR = _DEFAULTCREDENTIAL,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.DefaultCredential)
  ))
_sym_db.RegisterMessage(DefaultCredential)

Location = _reflection.GeneratedProtocolMessageType('Location', (_message.Message,), dict(
  DESCRIPTOR = _LOCATION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Location)
  ))
_sym_db.RegisterMessage(Location)

CreateFileSystemRequest = _reflection.GeneratedProtocolMessageType('CreateFileSystemRequest', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _CREATEFILESYSTEMREQUEST_PROPERTIESENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.CreateFileSystemRequest.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _CREATEFILESYSTEMREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CreateFileSystemRequest)
  ))
_sym_db.RegisterMessage(CreateFileSystemRequest)
_sym_db.RegisterMessage(CreateFileSystemRequest.PropertiesEntry)

FileSystem = _reflection.GeneratedProtocolMessageType('FileSystem', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEM,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystem)
  ))
_sym_db.RegisterMessage(FileSystem)

FileSystems = _reflection.GeneratedProtocolMessageType('FileSystems', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEMS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystems)
  ))
_sym_db.RegisterMessage(FileSystems)

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), dict(
  DESCRIPTOR = _PATH,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Path)
  ))
_sym_db.RegisterMessage(Path)

PathRequest = _reflection.GeneratedProtocolMessageType('PathRequest', (_message.Message,), dict(
  DESCRIPTOR = _PATHREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PathRequest)
  ))
_sym_db.RegisterMessage(PathRequest)

DeleteRequest = _reflection.GeneratedProtocolMessageType('DeleteRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETEREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.DeleteRequest)
  ))
_sym_db.RegisterMessage(DeleteRequest)

CopyRequest = _reflection.GeneratedProtocolMessageType('CopyRequest', (_message.Message,), dict(
  DESCRIPTOR = _COPYREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyRequest)
  ))
_sym_db.RegisterMessage(CopyRequest)

RenameRequest = _reflection.GeneratedProtocolMessageType('RenameRequest', (_message.Message,), dict(
  DESCRIPTOR = _RENAMEREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.RenameRequest)
  ))
_sym_db.RegisterMessage(RenameRequest)

CreateSymbolicLinkRequest = _reflection.GeneratedProtocolMessageType('CreateSymbolicLinkRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATESYMBOLICLINKREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CreateSymbolicLinkRequest)
  ))
_sym_db.RegisterMessage(CreateSymbolicLinkRequest)

CopyOperation = _reflection.GeneratedProtocolMessageType('CopyOperation', (_message.Message,), dict(
  DESCRIPTOR = _COPYOPERATION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyOperation)
  ))
_sym_db.RegisterMessage(CopyOperation)

CopyOperationRequest = _reflection.GeneratedProtocolMessageType('CopyOperationRequest', (_message.Message,), dict(
  DESCRIPTOR = _COPYOPERATIONREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyOperationRequest)
  ))
_sym_db.RegisterMessage(CopyOperationRequest)

WaitUntilDoneRequest = _reflection.GeneratedProtocolMessageType('WaitUntilDoneRequest', (_message.Message,), dict(
  DESCRIPTOR = _WAITUNTILDONEREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.WaitUntilDoneRequest)
  ))
_sym_db.RegisterMessage(WaitUntilDoneRequest)

CopyStatus = _reflection.GeneratedProtocolMessageType('CopyStatus', (_message.Message,), dict(
  DESCRIPTOR = _COPYSTATUS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyStatus)
  ))
_sym_db.RegisterMessage(CopyStatus)

PathAttributes = _reflection.GeneratedProtocolMessageType('PathAttributes', (_message.Message,), dict(
  DESCRIPTOR = _PATHATTRIBUTES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PathAttributes)
  ))
_sym_db.RegisterMessage(PathAttributes)

SetPosixFilePermissionsRequest = _reflection.GeneratedProtocolMessageType('SetPosixFilePermissionsRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETPOSIXFILEPERMISSIONSREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SetPosixFilePermissionsRequest)
  ))
_sym_db.RegisterMessage(SetPosixFilePermissionsRequest)

ReadFromFileResponse = _reflection.GeneratedProtocolMessageType('ReadFromFileResponse', (_message.Message,), dict(
  DESCRIPTOR = _READFROMFILERESPONSE,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.ReadFromFileResponse)
  ))
_sym_db.RegisterMessage(ReadFromFileResponse)

WriteToFileRequest = _reflection.GeneratedProtocolMessageType('WriteToFileRequest', (_message.Message,), dict(
  DESCRIPTOR = _WRITETOFILEREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.WriteToFileRequest)
  ))
_sym_db.RegisterMessage(WriteToFileRequest)

AppendToFileRequest = _reflection.GeneratedProtocolMessageType('AppendToFileRequest', (_message.Message,), dict(
  DESCRIPTOR = _APPENDTOFILEREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.AppendToFileRequest)
  ))
_sym_db.RegisterMessage(AppendToFileRequest)

ListRequest = _reflection.GeneratedProtocolMessageType('ListRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.ListRequest)
  ))
_sym_db.RegisterMessage(ListRequest)

GetPathSeparatorResponse = _reflection.GeneratedProtocolMessageType('GetPathSeparatorResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETPATHSEPARATORRESPONSE,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.GetPathSeparatorResponse)
  ))
_sym_db.RegisterMessage(GetPathSeparatorResponse)

CreateSchedulerRequest = _reflection.GeneratedProtocolMessageType('CreateSchedulerRequest', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _CREATESCHEDULERREQUEST_PROPERTIESENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.CreateSchedulerRequest.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _CREATESCHEDULERREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CreateSchedulerRequest)
  ))
_sym_db.RegisterMessage(CreateSchedulerRequest)
_sym_db.RegisterMessage(CreateSchedulerRequest.PropertiesEntry)

Scheduler = _reflection.GeneratedProtocolMessageType('Scheduler', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULER,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Scheduler)
  ))
_sym_db.RegisterMessage(Scheduler)

Schedulers = _reflection.GeneratedProtocolMessageType('Schedulers', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Schedulers)
  ))
_sym_db.RegisterMessage(Schedulers)

JobDescription = _reflection.GeneratedProtocolMessageType('JobDescription', (_message.Message,), dict(

  EnvironmentEntry = _reflection.GeneratedProtocolMessageType('EnvironmentEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBDESCRIPTION_ENVIRONMENTENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobDescription.EnvironmentEntry)
    ))
  ,

  OptionsEntry = _reflection.GeneratedProtocolMessageType('OptionsEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBDESCRIPTION_OPTIONSENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobDescription.OptionsEntry)
    ))
  ,
  DESCRIPTOR = _JOBDESCRIPTION,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobDescription)
  ))
_sym_db.RegisterMessage(JobDescription)
_sym_db.RegisterMessage(JobDescription.EnvironmentEntry)
_sym_db.RegisterMessage(JobDescription.OptionsEntry)

SubmitBatchJobRequest = _reflection.GeneratedProtocolMessageType('SubmitBatchJobRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBMITBATCHJOBREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SubmitBatchJobRequest)
  ))
_sym_db.RegisterMessage(SubmitBatchJobRequest)

SubmitInteractiveJobRequest = _reflection.GeneratedProtocolMessageType('SubmitInteractiveJobRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBMITINTERACTIVEJOBREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SubmitInteractiveJobRequest)
  ))
_sym_db.RegisterMessage(SubmitInteractiveJobRequest)

Job = _reflection.GeneratedProtocolMessageType('Job', (_message.Message,), dict(
  DESCRIPTOR = _JOB,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Job)
  ))
_sym_db.RegisterMessage(Job)

JobRequest = _reflection.GeneratedProtocolMessageType('JobRequest', (_message.Message,), dict(
  DESCRIPTOR = _JOBREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobRequest)
  ))
_sym_db.RegisterMessage(JobRequest)

Jobs = _reflection.GeneratedProtocolMessageType('Jobs', (_message.Message,), dict(
  DESCRIPTOR = _JOBS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Jobs)
  ))
_sym_db.RegisterMessage(Jobs)

GetJobStatusesRequest = _reflection.GeneratedProtocolMessageType('GetJobStatusesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETJOBSTATUSESREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.GetJobStatusesRequest)
  ))
_sym_db.RegisterMessage(GetJobStatusesRequest)

WaitRequest = _reflection.GeneratedProtocolMessageType('WaitRequest', (_message.Message,), dict(
  DESCRIPTOR = _WAITREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.WaitRequest)
  ))
_sym_db.RegisterMessage(WaitRequest)

Queue = _reflection.GeneratedProtocolMessageType('Queue', (_message.Message,), dict(
  DESCRIPTOR = _QUEUE,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Queue)
  ))
_sym_db.RegisterMessage(Queue)

Queues = _reflection.GeneratedProtocolMessageType('Queues', (_message.Message,), dict(
  DESCRIPTOR = _QUEUES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Queues)
  ))
_sym_db.RegisterMessage(Queues)

SchedulerAndQueues = _reflection.GeneratedProtocolMessageType('SchedulerAndQueues', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERANDQUEUES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SchedulerAndQueues)
  ))
_sym_db.RegisterMessage(SchedulerAndQueues)

GetQueueStatusRequest = _reflection.GeneratedProtocolMessageType('GetQueueStatusRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETQUEUESTATUSREQUEST,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.GetQueueStatusRequest)
  ))
_sym_db.RegisterMessage(GetQueueStatusRequest)

JobStatus = _reflection.GeneratedProtocolMessageType('JobStatus', (_message.Message,), dict(

  SchedulerSpecificInformationEntry = _reflection.GeneratedProtocolMessageType('SchedulerSpecificInformationEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobStatus.SchedulerSpecificInformationEntry)
    ))
  ,
  DESCRIPTOR = _JOBSTATUS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobStatus)
  ))
_sym_db.RegisterMessage(JobStatus)
_sym_db.RegisterMessage(JobStatus.SchedulerSpecificInformationEntry)

GetJobStatusesResponse = _reflection.GeneratedProtocolMessageType('GetJobStatusesResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETJOBSTATUSESRESPONSE,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.GetJobStatusesResponse)
  ))
_sym_db.RegisterMessage(GetJobStatusesResponse)

QueueStatus = _reflection.GeneratedProtocolMessageType('QueueStatus', (_message.Message,), dict(

  SchedulerSpecificInformationEntry = _reflection.GeneratedProtocolMessageType('SchedulerSpecificInformationEntry', (_message.Message,), dict(
    DESCRIPTOR = _QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY,
    __module__ = 'xenon.proto.xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.QueueStatus.SchedulerSpecificInformationEntry)
    ))
  ,
  DESCRIPTOR = _QUEUESTATUS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.QueueStatus)
  ))
_sym_db.RegisterMessage(QueueStatus)
_sym_db.RegisterMessage(QueueStatus.SchedulerSpecificInformationEntry)

QueueStatuses = _reflection.GeneratedProtocolMessageType('QueueStatuses', (_message.Message,), dict(
  DESCRIPTOR = _QUEUESTATUSES,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.QueueStatuses)
  ))
_sym_db.RegisterMessage(QueueStatuses)

SubmitInteractiveJobResponse = _reflection.GeneratedProtocolMessageType('SubmitInteractiveJobResponse', (_message.Message,), dict(
  DESCRIPTOR = _SUBMITINTERACTIVEJOBRESPONSE,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SubmitInteractiveJobResponse)
  ))
_sym_db.RegisterMessage(SubmitInteractiveJobResponse)

Is = _reflection.GeneratedProtocolMessageType('Is', (_message.Message,), dict(
  DESCRIPTOR = _IS,
  __module__ = 'xenon.proto.xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Is)
  ))
_sym_db.RegisterMessage(Is)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034nl.esciencecenter.xenon.grpcB\nXenonProto'))
_PROPERTIES_PROPERTIESENTRY.has_options = True
_PROPERTIES_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_CREATEFILESYSTEMREQUEST_PROPERTIESENTRY.has_options = True
_CREATEFILESYSTEMREQUEST_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_CREATESCHEDULERREQUEST_PROPERTIESENTRY.has_options = True
_CREATESCHEDULERREQUEST_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBDESCRIPTION_ENVIRONMENTENTRY.has_options = True
_JOBDESCRIPTION_ENVIRONMENTENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBDESCRIPTION_OPTIONSENTRY.has_options = True
_JOBDESCRIPTION_OPTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.has_options = True
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.has_options = True
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))

_FILESYSTEMSERVICE = _descriptor.ServiceDescriptor(
  name='FileSystemService',
  full_name='xenon.FileSystemService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=7044,
  serialized_end=8962,
  methods=[
  _descriptor.MethodDescriptor(
    name='getAdaptorDescriptions',
    full_name='xenon.FileSystemService.getAdaptorDescriptions',
    index=0,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_FILESYSTEMADAPTORDESCRIPTIONS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorNames',
    full_name='xenon.FileSystemService.getAdaptorNames',
    index=1,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_ADAPTORNAMES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorDescription',
    full_name='xenon.FileSystemService.getAdaptorDescription',
    index=2,
    containing_service=None,
    input_type=_ADAPTORNAME,
    output_type=_FILESYSTEMADAPTORDESCRIPTION,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='create',
    full_name='xenon.FileSystemService.create',
    index=3,
    containing_service=None,
    input_type=_CREATEFILESYSTEMREQUEST,
    output_type=_FILESYSTEM,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorName',
    full_name='xenon.FileSystemService.getAdaptorName',
    index=4,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_ADAPTORNAME,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getLocation',
    full_name='xenon.FileSystemService.getLocation',
    index=5,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_LOCATION,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getProperties',
    full_name='xenon.FileSystemService.getProperties',
    index=6,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_PROPERTIES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='createDirectories',
    full_name='xenon.FileSystemService.createDirectories',
    index=7,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='createDirectory',
    full_name='xenon.FileSystemService.createDirectory',
    index=8,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='createFile',
    full_name='xenon.FileSystemService.createFile',
    index=9,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='createSymbolicLink',
    full_name='xenon.FileSystemService.createSymbolicLink',
    index=10,
    containing_service=None,
    input_type=_CREATESYMBOLICLINKREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='copy',
    full_name='xenon.FileSystemService.copy',
    index=11,
    containing_service=None,
    input_type=_COPYREQUEST,
    output_type=_COPYOPERATION,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='cancel',
    full_name='xenon.FileSystemService.cancel',
    index=12,
    containing_service=None,
    input_type=_COPYOPERATIONREQUEST,
    output_type=_COPYSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getStatus',
    full_name='xenon.FileSystemService.getStatus',
    index=13,
    containing_service=None,
    input_type=_COPYOPERATIONREQUEST,
    output_type=_COPYSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='rename',
    full_name='xenon.FileSystemService.rename',
    index=14,
    containing_service=None,
    input_type=_RENAMEREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='delete',
    full_name='xenon.FileSystemService.delete',
    index=15,
    containing_service=None,
    input_type=_DELETEREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='exists',
    full_name='xenon.FileSystemService.exists',
    index=16,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_IS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='readFromFile',
    full_name='xenon.FileSystemService.readFromFile',
    index=17,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_READFROMFILERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='writeToFile',
    full_name='xenon.FileSystemService.writeToFile',
    index=18,
    containing_service=None,
    input_type=_WRITETOFILEREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='appendToFile',
    full_name='xenon.FileSystemService.appendToFile',
    index=19,
    containing_service=None,
    input_type=_APPENDTOFILEREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='list',
    full_name='xenon.FileSystemService.list',
    index=20,
    containing_service=None,
    input_type=_LISTREQUEST,
    output_type=_PATHATTRIBUTES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAttributes',
    full_name='xenon.FileSystemService.getAttributes',
    index=21,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_PATHATTRIBUTES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getWorkingDirectory',
    full_name='xenon.FileSystemService.getWorkingDirectory',
    index=22,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_PATH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setWorkingDirectory',
    full_name='xenon.FileSystemService.setWorkingDirectory',
    index=23,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='setPosixFilePermissions',
    full_name='xenon.FileSystemService.setPosixFilePermissions',
    index=24,
    containing_service=None,
    input_type=_SETPOSIXFILEPERMISSIONSREQUEST,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='readSymbolicLink',
    full_name='xenon.FileSystemService.readSymbolicLink',
    index=25,
    containing_service=None,
    input_type=_PATHREQUEST,
    output_type=_PATH,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getPathSeparator',
    full_name='xenon.FileSystemService.getPathSeparator',
    index=26,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_GETPATHSEPARATORRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='isOpen',
    full_name='xenon.FileSystemService.isOpen',
    index=27,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_IS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='close',
    full_name='xenon.FileSystemService.close',
    index=28,
    containing_service=None,
    input_type=_FILESYSTEM,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='waitUntilDone',
    full_name='xenon.FileSystemService.waitUntilDone',
    index=29,
    containing_service=None,
    input_type=_WAITUNTILDONEREQUEST,
    output_type=_COPYSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='localFileSystems',
    full_name='xenon.FileSystemService.localFileSystems',
    index=30,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_FILESYSTEMS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='listFileSystems',
    full_name='xenon.FileSystemService.listFileSystems',
    index=31,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_FILESYSTEMS,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_FILESYSTEMSERVICE)

DESCRIPTOR.services_by_name['FileSystemService'] = _FILESYSTEMSERVICE


_SCHEDULERSERVICE = _descriptor.ServiceDescriptor(
  name='SchedulerService',
  full_name='xenon.SchedulerService',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=8965,
  serialized_end=10446,
  methods=[
  _descriptor.MethodDescriptor(
    name='getAdaptorDescriptions',
    full_name='xenon.SchedulerService.getAdaptorDescriptions',
    index=0,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SCHEDULERADAPTORDESCRIPTIONS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorNames',
    full_name='xenon.SchedulerService.getAdaptorNames',
    index=1,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_ADAPTORNAMES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorDescription',
    full_name='xenon.SchedulerService.getAdaptorDescription',
    index=2,
    containing_service=None,
    input_type=_ADAPTORNAME,
    output_type=_SCHEDULERADAPTORDESCRIPTION,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='create',
    full_name='xenon.SchedulerService.create',
    index=3,
    containing_service=None,
    input_type=_CREATESCHEDULERREQUEST,
    output_type=_SCHEDULER,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getAdaptorName',
    full_name='xenon.SchedulerService.getAdaptorName',
    index=4,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_ADAPTORNAME,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getLocation',
    full_name='xenon.SchedulerService.getLocation',
    index=5,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_LOCATION,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getProperties',
    full_name='xenon.SchedulerService.getProperties',
    index=6,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_PROPERTIES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='submitBatchJob',
    full_name='xenon.SchedulerService.submitBatchJob',
    index=7,
    containing_service=None,
    input_type=_SUBMITBATCHJOBREQUEST,
    output_type=_JOB,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='submitInteractiveJob',
    full_name='xenon.SchedulerService.submitInteractiveJob',
    index=8,
    containing_service=None,
    input_type=_SUBMITINTERACTIVEJOBREQUEST,
    output_type=_SUBMITINTERACTIVEJOBRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getQueueNames',
    full_name='xenon.SchedulerService.getQueueNames',
    index=9,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_QUEUES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getDefaultQueueName',
    full_name='xenon.SchedulerService.getDefaultQueueName',
    index=10,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_QUEUE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getJobs',
    full_name='xenon.SchedulerService.getJobs',
    index=11,
    containing_service=None,
    input_type=_SCHEDULERANDQUEUES,
    output_type=_JOBS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getJobStatus',
    full_name='xenon.SchedulerService.getJobStatus',
    index=12,
    containing_service=None,
    input_type=_JOBREQUEST,
    output_type=_JOBSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getJobStatuses',
    full_name='xenon.SchedulerService.getJobStatuses',
    index=13,
    containing_service=None,
    input_type=_GETJOBSTATUSESREQUEST,
    output_type=_GETJOBSTATUSESRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getQueueStatus',
    full_name='xenon.SchedulerService.getQueueStatus',
    index=14,
    containing_service=None,
    input_type=_GETQUEUESTATUSREQUEST,
    output_type=_QUEUESTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getQueueStatuses',
    full_name='xenon.SchedulerService.getQueueStatuses',
    index=15,
    containing_service=None,
    input_type=_SCHEDULERANDQUEUES,
    output_type=_QUEUESTATUSES,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='waitUntilDone',
    full_name='xenon.SchedulerService.waitUntilDone',
    index=16,
    containing_service=None,
    input_type=_WAITREQUEST,
    output_type=_JOBSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='waitUntilRunning',
    full_name='xenon.SchedulerService.waitUntilRunning',
    index=17,
    containing_service=None,
    input_type=_WAITREQUEST,
    output_type=_JOBSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='isOpen',
    full_name='xenon.SchedulerService.isOpen',
    index=18,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_IS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='cancelJob',
    full_name='xenon.SchedulerService.cancelJob',
    index=19,
    containing_service=None,
    input_type=_JOBREQUEST,
    output_type=_JOBSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getFileSystem',
    full_name='xenon.SchedulerService.getFileSystem',
    index=20,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_FILESYSTEM,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='close',
    full_name='xenon.SchedulerService.close',
    index=21,
    containing_service=None,
    input_type=_SCHEDULER,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='localScheduler',
    full_name='xenon.SchedulerService.localScheduler',
    index=22,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SCHEDULER,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='listSchedulers',
    full_name='xenon.SchedulerService.listSchedulers',
    index=23,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SCHEDULERS,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SCHEDULERSERVICE)

DESCRIPTOR.services_by_name['SchedulerService'] = _SCHEDULERSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class FileSystemServiceStub(object):
    """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
    This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.getAdaptorDescriptions = channel.unary_unary(
          '/xenon.FileSystemService/getAdaptorDescriptions',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileSystemAdaptorDescriptions.FromString,
          )
      self.getAdaptorNames = channel.unary_unary(
          '/xenon.FileSystemService/getAdaptorNames',
          request_serializer=Empty.SerializeToString,
          response_deserializer=AdaptorNames.FromString,
          )
      self.getAdaptorDescription = channel.unary_unary(
          '/xenon.FileSystemService/getAdaptorDescription',
          request_serializer=AdaptorName.SerializeToString,
          response_deserializer=FileSystemAdaptorDescription.FromString,
          )
      self.create = channel.unary_unary(
          '/xenon.FileSystemService/create',
          request_serializer=CreateFileSystemRequest.SerializeToString,
          response_deserializer=FileSystem.FromString,
          )
      self.getAdaptorName = channel.unary_unary(
          '/xenon.FileSystemService/getAdaptorName',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=AdaptorName.FromString,
          )
      self.getLocation = channel.unary_unary(
          '/xenon.FileSystemService/getLocation',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Location.FromString,
          )
      self.getProperties = channel.unary_unary(
          '/xenon.FileSystemService/getProperties',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Properties.FromString,
          )
      self.createDirectories = channel.unary_unary(
          '/xenon.FileSystemService/createDirectories',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.createDirectory = channel.unary_unary(
          '/xenon.FileSystemService/createDirectory',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.createFile = channel.unary_unary(
          '/xenon.FileSystemService/createFile',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.createSymbolicLink = channel.unary_unary(
          '/xenon.FileSystemService/createSymbolicLink',
          request_serializer=CreateSymbolicLinkRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.copy = channel.unary_unary(
          '/xenon.FileSystemService/copy',
          request_serializer=CopyRequest.SerializeToString,
          response_deserializer=CopyOperation.FromString,
          )
      self.cancel = channel.unary_unary(
          '/xenon.FileSystemService/cancel',
          request_serializer=CopyOperationRequest.SerializeToString,
          response_deserializer=CopyStatus.FromString,
          )
      self.getStatus = channel.unary_unary(
          '/xenon.FileSystemService/getStatus',
          request_serializer=CopyOperationRequest.SerializeToString,
          response_deserializer=CopyStatus.FromString,
          )
      self.rename = channel.unary_unary(
          '/xenon.FileSystemService/rename',
          request_serializer=RenameRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.delete = channel.unary_unary(
          '/xenon.FileSystemService/delete',
          request_serializer=DeleteRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.exists = channel.unary_unary(
          '/xenon.FileSystemService/exists',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.readFromFile = channel.unary_stream(
          '/xenon.FileSystemService/readFromFile',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=ReadFromFileResponse.FromString,
          )
      self.writeToFile = channel.stream_unary(
          '/xenon.FileSystemService/writeToFile',
          request_serializer=WriteToFileRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.appendToFile = channel.stream_unary(
          '/xenon.FileSystemService/appendToFile',
          request_serializer=AppendToFileRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.list = channel.unary_stream(
          '/xenon.FileSystemService/list',
          request_serializer=ListRequest.SerializeToString,
          response_deserializer=PathAttributes.FromString,
          )
      self.getAttributes = channel.unary_unary(
          '/xenon.FileSystemService/getAttributes',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=PathAttributes.FromString,
          )
      self.getWorkingDirectory = channel.unary_unary(
          '/xenon.FileSystemService/getWorkingDirectory',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Path.FromString,
          )
      self.setWorkingDirectory = channel.unary_unary(
          '/xenon.FileSystemService/setWorkingDirectory',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.setPosixFilePermissions = channel.unary_unary(
          '/xenon.FileSystemService/setPosixFilePermissions',
          request_serializer=SetPosixFilePermissionsRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.readSymbolicLink = channel.unary_unary(
          '/xenon.FileSystemService/readSymbolicLink',
          request_serializer=PathRequest.SerializeToString,
          response_deserializer=Path.FromString,
          )
      self.getPathSeparator = channel.unary_unary(
          '/xenon.FileSystemService/getPathSeparator',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=GetPathSeparatorResponse.FromString,
          )
      self.isOpen = channel.unary_unary(
          '/xenon.FileSystemService/isOpen',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.close = channel.unary_unary(
          '/xenon.FileSystemService/close',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.waitUntilDone = channel.unary_unary(
          '/xenon.FileSystemService/waitUntilDone',
          request_serializer=WaitUntilDoneRequest.SerializeToString,
          response_deserializer=CopyStatus.FromString,
          )
      self.localFileSystems = channel.unary_unary(
          '/xenon.FileSystemService/localFileSystems',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileSystems.FromString,
          )
      self.listFileSystems = channel.unary_unary(
          '/xenon.FileSystemService/listFileSystems',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileSystems.FromString,
          )


  class FileSystemServiceServicer(object):
    """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
    This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """

    def getAdaptorDescriptions(self, request, context):
      """Gives a list of the descriptions of the available adaptors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorNames(self, request, context):
      """Gives a list names of the available adaptors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorDescription(self, request, context):
      """Gives the description of the adaptor with the given name.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
      """Create a new FileSystem using the adaptor that connects to a data store at location using the credentials to get access.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorName(self, request, context):
      """Get the name of the adaptor that created this FileSystem.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getLocation(self, request, context):
      """Get the location that this FileSystem is connected to.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getProperties(self, request, context):
      """Get the properties used to create this FileSystem.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createDirectories(self, request, context):
      """Creates a new directory, including parent directories, failing if the directory already exists.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createDirectory(self, request, context):
      """Creates a new directory, failing if the directory already exists.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createFile(self, request, context):
      """Creates a new empty file, failing if the file already exists.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createSymbolicLink(self, request, context):
      """Creates a new symbolic link, failing if the link already exists
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def copy(self, request, context):
      """Asynchronously Copy an existing source path to a target path on a different file system.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
      """Cancel a copy operation.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
      """Retrieve the status of an copy.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def rename(self, request, context):
      """Rename an existing source path to a non-existing target path
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
      """Deletes an existing path.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def exists(self, request, context):
      """Tests if a path exists.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def readFromFile(self, request, context):
      """Open an existing file and return an InputStream to read from this file.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def writeToFile(self, request_iterator, context):
      """Open a file and return an OutputStream to write to this file.
      In Xenon library if request is missing size field then FileSystem.writeToFile(Path file) is used
      else FileSystem.writeToFile(Path path, long size) is used
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def appendToFile(self, request_iterator, context):
      """Open an existing file and return an OutputStream to append data to this file.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
      """List all entries in the directory dir.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAttributes(self, request, context):
      """Get the PathAttributes of an existing path.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getWorkingDirectory(self, request, context):
      """Get the current working directory of this file system.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setWorkingDirectory(self, request, context):
      """Set the current working directory of this file system to directory.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setPosixFilePermissions(self, request, context):
      """Sets the POSIX permissions of a path
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def readSymbolicLink(self, request, context):
      """Reads the target of a symbolic link
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPathSeparator(self, request, context):
      """Get the path separator used by this file system.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isOpen(self, request, context):
      """Return if the connection to the FileSystem is open.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
      """Close this filestem
      Any pending/running copy operations of this filestystem will be terminated
      Will also forget this filesystem
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def waitUntilDone(self, request, context):
      """Wait until a copy operation is done or until a timeout expires.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def localFileSystems(self, request, context):
      """Returns filesystems for all local drives
      Not part of FileSystem class in Xenon library
      In Xenon library available as LocalFileSystemUtils.getLocalFileSystems()
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listFileSystems(self, request, context):
      """List the created filesystems
      Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_FileSystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescriptions,
            request_deserializer=Empty.FromString,
            response_serializer=FileSystemAdaptorDescriptions.SerializeToString,
        ),
        'getAdaptorNames': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorNames,
            request_deserializer=Empty.FromString,
            response_serializer=AdaptorNames.SerializeToString,
        ),
        'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescription,
            request_deserializer=AdaptorName.FromString,
            response_serializer=FileSystemAdaptorDescription.SerializeToString,
        ),
        'create': grpc.unary_unary_rpc_method_handler(
            servicer.create,
            request_deserializer=CreateFileSystemRequest.FromString,
            response_serializer=FileSystem.SerializeToString,
        ),
        'getAdaptorName': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorName,
            request_deserializer=FileSystem.FromString,
            response_serializer=AdaptorName.SerializeToString,
        ),
        'getLocation': grpc.unary_unary_rpc_method_handler(
            servicer.getLocation,
            request_deserializer=FileSystem.FromString,
            response_serializer=Location.SerializeToString,
        ),
        'getProperties': grpc.unary_unary_rpc_method_handler(
            servicer.getProperties,
            request_deserializer=FileSystem.FromString,
            response_serializer=Properties.SerializeToString,
        ),
        'createDirectories': grpc.unary_unary_rpc_method_handler(
            servicer.createDirectories,
            request_deserializer=PathRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'createDirectory': grpc.unary_unary_rpc_method_handler(
            servicer.createDirectory,
            request_deserializer=PathRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'createFile': grpc.unary_unary_rpc_method_handler(
            servicer.createFile,
            request_deserializer=PathRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'createSymbolicLink': grpc.unary_unary_rpc_method_handler(
            servicer.createSymbolicLink,
            request_deserializer=CreateSymbolicLinkRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'copy': grpc.unary_unary_rpc_method_handler(
            servicer.copy,
            request_deserializer=CopyRequest.FromString,
            response_serializer=CopyOperation.SerializeToString,
        ),
        'cancel': grpc.unary_unary_rpc_method_handler(
            servicer.cancel,
            request_deserializer=CopyOperationRequest.FromString,
            response_serializer=CopyStatus.SerializeToString,
        ),
        'getStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getStatus,
            request_deserializer=CopyOperationRequest.FromString,
            response_serializer=CopyStatus.SerializeToString,
        ),
        'rename': grpc.unary_unary_rpc_method_handler(
            servicer.rename,
            request_deserializer=RenameRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'delete': grpc.unary_unary_rpc_method_handler(
            servicer.delete,
            request_deserializer=DeleteRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'exists': grpc.unary_unary_rpc_method_handler(
            servicer.exists,
            request_deserializer=PathRequest.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'readFromFile': grpc.unary_stream_rpc_method_handler(
            servicer.readFromFile,
            request_deserializer=PathRequest.FromString,
            response_serializer=ReadFromFileResponse.SerializeToString,
        ),
        'writeToFile': grpc.stream_unary_rpc_method_handler(
            servicer.writeToFile,
            request_deserializer=WriteToFileRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'appendToFile': grpc.stream_unary_rpc_method_handler(
            servicer.appendToFile,
            request_deserializer=AppendToFileRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'list': grpc.unary_stream_rpc_method_handler(
            servicer.list,
            request_deserializer=ListRequest.FromString,
            response_serializer=PathAttributes.SerializeToString,
        ),
        'getAttributes': grpc.unary_unary_rpc_method_handler(
            servicer.getAttributes,
            request_deserializer=PathRequest.FromString,
            response_serializer=PathAttributes.SerializeToString,
        ),
        'getWorkingDirectory': grpc.unary_unary_rpc_method_handler(
            servicer.getWorkingDirectory,
            request_deserializer=FileSystem.FromString,
            response_serializer=Path.SerializeToString,
        ),
        'setWorkingDirectory': grpc.unary_unary_rpc_method_handler(
            servicer.setWorkingDirectory,
            request_deserializer=PathRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'setPosixFilePermissions': grpc.unary_unary_rpc_method_handler(
            servicer.setPosixFilePermissions,
            request_deserializer=SetPosixFilePermissionsRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'readSymbolicLink': grpc.unary_unary_rpc_method_handler(
            servicer.readSymbolicLink,
            request_deserializer=PathRequest.FromString,
            response_serializer=Path.SerializeToString,
        ),
        'getPathSeparator': grpc.unary_unary_rpc_method_handler(
            servicer.getPathSeparator,
            request_deserializer=FileSystem.FromString,
            response_serializer=GetPathSeparatorResponse.SerializeToString,
        ),
        'isOpen': grpc.unary_unary_rpc_method_handler(
            servicer.isOpen,
            request_deserializer=FileSystem.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'close': grpc.unary_unary_rpc_method_handler(
            servicer.close,
            request_deserializer=FileSystem.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'waitUntilDone': grpc.unary_unary_rpc_method_handler(
            servicer.waitUntilDone,
            request_deserializer=WaitUntilDoneRequest.FromString,
            response_serializer=CopyStatus.SerializeToString,
        ),
        'localFileSystems': grpc.unary_unary_rpc_method_handler(
            servicer.localFileSystems,
            request_deserializer=Empty.FromString,
            response_serializer=FileSystems.SerializeToString,
        ),
        'listFileSystems': grpc.unary_unary_rpc_method_handler(
            servicer.listFileSystems,
            request_deserializer=Empty.FromString,
            response_serializer=FileSystems.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xenon.FileSystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class SchedulerServiceStub(object):
    """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.getAdaptorDescriptions = channel.unary_unary(
          '/xenon.SchedulerService/getAdaptorDescriptions',
          request_serializer=Empty.SerializeToString,
          response_deserializer=SchedulerAdaptorDescriptions.FromString,
          )
      self.getAdaptorNames = channel.unary_unary(
          '/xenon.SchedulerService/getAdaptorNames',
          request_serializer=Empty.SerializeToString,
          response_deserializer=AdaptorNames.FromString,
          )
      self.getAdaptorDescription = channel.unary_unary(
          '/xenon.SchedulerService/getAdaptorDescription',
          request_serializer=AdaptorName.SerializeToString,
          response_deserializer=SchedulerAdaptorDescription.FromString,
          )
      self.create = channel.unary_unary(
          '/xenon.SchedulerService/create',
          request_serializer=CreateSchedulerRequest.SerializeToString,
          response_deserializer=Scheduler.FromString,
          )
      self.getAdaptorName = channel.unary_unary(
          '/xenon.SchedulerService/getAdaptorName',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=AdaptorName.FromString,
          )
      self.getLocation = channel.unary_unary(
          '/xenon.SchedulerService/getLocation',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Location.FromString,
          )
      self.getProperties = channel.unary_unary(
          '/xenon.SchedulerService/getProperties',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Properties.FromString,
          )
      self.submitBatchJob = channel.unary_unary(
          '/xenon.SchedulerService/submitBatchJob',
          request_serializer=SubmitBatchJobRequest.SerializeToString,
          response_deserializer=Job.FromString,
          )
      self.submitInteractiveJob = channel.stream_stream(
          '/xenon.SchedulerService/submitInteractiveJob',
          request_serializer=SubmitInteractiveJobRequest.SerializeToString,
          response_deserializer=SubmitInteractiveJobResponse.FromString,
          )
      self.getQueueNames = channel.unary_unary(
          '/xenon.SchedulerService/getQueueNames',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Queues.FromString,
          )
      self.getDefaultQueueName = channel.unary_unary(
          '/xenon.SchedulerService/getDefaultQueueName',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Queue.FromString,
          )
      self.getJobs = channel.unary_unary(
          '/xenon.SchedulerService/getJobs',
          request_serializer=SchedulerAndQueues.SerializeToString,
          response_deserializer=Jobs.FromString,
          )
      self.getJobStatus = channel.unary_unary(
          '/xenon.SchedulerService/getJobStatus',
          request_serializer=JobRequest.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.getJobStatuses = channel.unary_unary(
          '/xenon.SchedulerService/getJobStatuses',
          request_serializer=GetJobStatusesRequest.SerializeToString,
          response_deserializer=GetJobStatusesResponse.FromString,
          )
      self.getQueueStatus = channel.unary_unary(
          '/xenon.SchedulerService/getQueueStatus',
          request_serializer=GetQueueStatusRequest.SerializeToString,
          response_deserializer=QueueStatus.FromString,
          )
      self.getQueueStatuses = channel.unary_unary(
          '/xenon.SchedulerService/getQueueStatuses',
          request_serializer=SchedulerAndQueues.SerializeToString,
          response_deserializer=QueueStatuses.FromString,
          )
      self.waitUntilDone = channel.unary_unary(
          '/xenon.SchedulerService/waitUntilDone',
          request_serializer=WaitRequest.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.waitUntilRunning = channel.unary_unary(
          '/xenon.SchedulerService/waitUntilRunning',
          request_serializer=WaitRequest.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.isOpen = channel.unary_unary(
          '/xenon.SchedulerService/isOpen',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.cancelJob = channel.unary_unary(
          '/xenon.SchedulerService/cancelJob',
          request_serializer=JobRequest.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.getFileSystem = channel.unary_unary(
          '/xenon.SchedulerService/getFileSystem',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=FileSystem.FromString,
          )
      self.close = channel.unary_unary(
          '/xenon.SchedulerService/close',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.localScheduler = channel.unary_unary(
          '/xenon.SchedulerService/localScheduler',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Scheduler.FromString,
          )
      self.listSchedulers = channel.unary_unary(
          '/xenon.SchedulerService/listSchedulers',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Schedulers.FromString,
          )


  class SchedulerServiceServicer(object):
    """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """

    def getAdaptorDescriptions(self, request, context):
      """Gives a list of the descriptions of the available adaptors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorNames(self, request, context):
      """Gives a list names of the available adaptors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorDescription(self, request, context):
      """Gives the description of the adaptor with the given name.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
      """Create a new Scheduler using the adaptor connecting to the location using credentials to get access.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorName(self, request, context):
      """Get the name of the adaptor that created this Scheduler.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getLocation(self, request, context):
      """Get the location that this Scheduler is connected to.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getProperties(self, request, context):
      """Get the properties used to create this Scheduler.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def submitBatchJob(self, request, context):
      """Submit a batch job.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def submitInteractiveJob(self, request_iterator, context):
      """Submit an interactive job
      The first response message in the response stream will contain the job identifier and empty stdout and stdout.
      Other response messages will also contain the job identifier and filled stdout and/or stderr.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueueNames(self, request, context):
      """Get the queue names supported by this Scheduler.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDefaultQueueName(self, request, context):
      """Get the name of the default queue.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobs(self, request, context):
      """Get all job identifier of jobs currently in (one ore more) queues.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobStatus(self, request, context):
      """Get the status of a Job.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobStatuses(self, request, context):
      """Get the status of all specified jobs.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueueStatus(self, request, context):
      """Get the status of the queue.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueueStatuses(self, request, context):
      """Get the status of all queues.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def waitUntilDone(self, request, context):
      """Wait until a job is done or until a timeout expires.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def waitUntilRunning(self, request, context):
      """Wait until a job starts running, or until a timeout expires.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isOpen(self, request, context):
      """Test if the connection of this Scheduler is open.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cancelJob(self, request, context):
      """Cancel a job
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getFileSystem(self, request, context):
      """Retrieve the FileSystem used internally by this Scheduler.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
      """Close this Scheduler.
      If scheduler is embedded then any pending/running jobs will be killed
      Will also forget this scheduler
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def localScheduler(self, request, context):
      """Get scheduler on local filesystem with default location, credential and no properties
      Not part of Scheduler class in Xenon library
      In Xenon library available as Scheduler.create("local")
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listSchedulers(self, request, context):
      """List the created schedulers
      Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SchedulerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescriptions,
            request_deserializer=Empty.FromString,
            response_serializer=SchedulerAdaptorDescriptions.SerializeToString,
        ),
        'getAdaptorNames': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorNames,
            request_deserializer=Empty.FromString,
            response_serializer=AdaptorNames.SerializeToString,
        ),
        'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescription,
            request_deserializer=AdaptorName.FromString,
            response_serializer=SchedulerAdaptorDescription.SerializeToString,
        ),
        'create': grpc.unary_unary_rpc_method_handler(
            servicer.create,
            request_deserializer=CreateSchedulerRequest.FromString,
            response_serializer=Scheduler.SerializeToString,
        ),
        'getAdaptorName': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorName,
            request_deserializer=Scheduler.FromString,
            response_serializer=AdaptorName.SerializeToString,
        ),
        'getLocation': grpc.unary_unary_rpc_method_handler(
            servicer.getLocation,
            request_deserializer=Scheduler.FromString,
            response_serializer=Location.SerializeToString,
        ),
        'getProperties': grpc.unary_unary_rpc_method_handler(
            servicer.getProperties,
            request_deserializer=Scheduler.FromString,
            response_serializer=Properties.SerializeToString,
        ),
        'submitBatchJob': grpc.unary_unary_rpc_method_handler(
            servicer.submitBatchJob,
            request_deserializer=SubmitBatchJobRequest.FromString,
            response_serializer=Job.SerializeToString,
        ),
        'submitInteractiveJob': grpc.stream_stream_rpc_method_handler(
            servicer.submitInteractiveJob,
            request_deserializer=SubmitInteractiveJobRequest.FromString,
            response_serializer=SubmitInteractiveJobResponse.SerializeToString,
        ),
        'getQueueNames': grpc.unary_unary_rpc_method_handler(
            servicer.getQueueNames,
            request_deserializer=Scheduler.FromString,
            response_serializer=Queues.SerializeToString,
        ),
        'getDefaultQueueName': grpc.unary_unary_rpc_method_handler(
            servicer.getDefaultQueueName,
            request_deserializer=Scheduler.FromString,
            response_serializer=Queue.SerializeToString,
        ),
        'getJobs': grpc.unary_unary_rpc_method_handler(
            servicer.getJobs,
            request_deserializer=SchedulerAndQueues.FromString,
            response_serializer=Jobs.SerializeToString,
        ),
        'getJobStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getJobStatus,
            request_deserializer=JobRequest.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'getJobStatuses': grpc.unary_unary_rpc_method_handler(
            servicer.getJobStatuses,
            request_deserializer=GetJobStatusesRequest.FromString,
            response_serializer=GetJobStatusesResponse.SerializeToString,
        ),
        'getQueueStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getQueueStatus,
            request_deserializer=GetQueueStatusRequest.FromString,
            response_serializer=QueueStatus.SerializeToString,
        ),
        'getQueueStatuses': grpc.unary_unary_rpc_method_handler(
            servicer.getQueueStatuses,
            request_deserializer=SchedulerAndQueues.FromString,
            response_serializer=QueueStatuses.SerializeToString,
        ),
        'waitUntilDone': grpc.unary_unary_rpc_method_handler(
            servicer.waitUntilDone,
            request_deserializer=WaitRequest.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'waitUntilRunning': grpc.unary_unary_rpc_method_handler(
            servicer.waitUntilRunning,
            request_deserializer=WaitRequest.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'isOpen': grpc.unary_unary_rpc_method_handler(
            servicer.isOpen,
            request_deserializer=Scheduler.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'cancelJob': grpc.unary_unary_rpc_method_handler(
            servicer.cancelJob,
            request_deserializer=JobRequest.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'getFileSystem': grpc.unary_unary_rpc_method_handler(
            servicer.getFileSystem,
            request_deserializer=Scheduler.FromString,
            response_serializer=FileSystem.SerializeToString,
        ),
        'close': grpc.unary_unary_rpc_method_handler(
            servicer.close,
            request_deserializer=Scheduler.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'localScheduler': grpc.unary_unary_rpc_method_handler(
            servicer.localScheduler,
            request_deserializer=Empty.FromString,
            response_serializer=Scheduler.SerializeToString,
        ),
        'listSchedulers': grpc.unary_unary_rpc_method_handler(
            servicer.listSchedulers,
            request_deserializer=Empty.FromString,
            response_serializer=Schedulers.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xenon.SchedulerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaFileSystemServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
    This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """
    def getAdaptorDescriptions(self, request, context):
      """Gives a list of the descriptions of the available adaptors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorNames(self, request, context):
      """Gives a list names of the available adaptors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorDescription(self, request, context):
      """Gives the description of the adaptor with the given name.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def create(self, request, context):
      """Create a new FileSystem using the adaptor that connects to a data store at location using the credentials to get access.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorName(self, request, context):
      """Get the name of the adaptor that created this FileSystem.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getLocation(self, request, context):
      """Get the location that this FileSystem is connected to.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getProperties(self, request, context):
      """Get the properties used to create this FileSystem.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createDirectories(self, request, context):
      """Creates a new directory, including parent directories, failing if the directory already exists.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createDirectory(self, request, context):
      """Creates a new directory, failing if the directory already exists.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createFile(self, request, context):
      """Creates a new empty file, failing if the file already exists.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createSymbolicLink(self, request, context):
      """Creates a new symbolic link, failing if the link already exists
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def copy(self, request, context):
      """Asynchronously Copy an existing source path to a target path on a different file system.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cancel(self, request, context):
      """Cancel a copy operation.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getStatus(self, request, context):
      """Retrieve the status of an copy.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def rename(self, request, context):
      """Rename an existing source path to a non-existing target path
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def delete(self, request, context):
      """Deletes an existing path.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def exists(self, request, context):
      """Tests if a path exists.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def readFromFile(self, request, context):
      """Open an existing file and return an InputStream to read from this file.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def writeToFile(self, request_iterator, context):
      """Open a file and return an OutputStream to write to this file.
      In Xenon library if request is missing size field then FileSystem.writeToFile(Path file) is used
      else FileSystem.writeToFile(Path path, long size) is used
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def appendToFile(self, request_iterator, context):
      """Open an existing file and return an OutputStream to append data to this file.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def list(self, request, context):
      """List all entries in the directory dir.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAttributes(self, request, context):
      """Get the PathAttributes of an existing path.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getWorkingDirectory(self, request, context):
      """Get the current working directory of this file system.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setWorkingDirectory(self, request, context):
      """Set the current working directory of this file system to directory.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setPosixFilePermissions(self, request, context):
      """Sets the POSIX permissions of a path
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def readSymbolicLink(self, request, context):
      """Reads the target of a symbolic link
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPathSeparator(self, request, context):
      """Get the path separator used by this file system.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isOpen(self, request, context):
      """Return if the connection to the FileSystem is open.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def close(self, request, context):
      """Close this filestem
      Any pending/running copy operations of this filestystem will be terminated
      Will also forget this filesystem
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def waitUntilDone(self, request, context):
      """Wait until a copy operation is done or until a timeout expires.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def localFileSystems(self, request, context):
      """Returns filesystems for all local drives
      Not part of FileSystem class in Xenon library
      In Xenon library available as LocalFileSystemUtils.getLocalFileSystems()
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listFileSystems(self, request, context):
      """List the created filesystems
      Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaFileSystemServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
    This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """
    def getAdaptorDescriptions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives a list of the descriptions of the available adaptors.
      """
      raise NotImplementedError()
    getAdaptorDescriptions.future = None
    def getAdaptorNames(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives a list names of the available adaptors.
      """
      raise NotImplementedError()
    getAdaptorNames.future = None
    def getAdaptorDescription(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives the description of the adaptor with the given name.
      """
      raise NotImplementedError()
    getAdaptorDescription.future = None
    def create(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Create a new FileSystem using the adaptor that connects to a data store at location using the credentials to get access.
      """
      raise NotImplementedError()
    create.future = None
    def getAdaptorName(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the name of the adaptor that created this FileSystem.
      """
      raise NotImplementedError()
    getAdaptorName.future = None
    def getLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the location that this FileSystem is connected to.
      """
      raise NotImplementedError()
    getLocation.future = None
    def getProperties(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the properties used to create this FileSystem.
      """
      raise NotImplementedError()
    getProperties.future = None
    def createDirectories(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new directory, including parent directories, failing if the directory already exists.
      """
      raise NotImplementedError()
    createDirectories.future = None
    def createDirectory(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new directory, failing if the directory already exists.
      """
      raise NotImplementedError()
    createDirectory.future = None
    def createFile(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new empty file, failing if the file already exists.
      """
      raise NotImplementedError()
    createFile.future = None
    def createSymbolicLink(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new symbolic link, failing if the link already exists
      """
      raise NotImplementedError()
    createSymbolicLink.future = None
    def copy(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Asynchronously Copy an existing source path to a target path on a different file system.
      """
      raise NotImplementedError()
    copy.future = None
    def cancel(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Cancel a copy operation.
      """
      raise NotImplementedError()
    cancel.future = None
    def getStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve the status of an copy.
      """
      raise NotImplementedError()
    getStatus.future = None
    def rename(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Rename an existing source path to a non-existing target path
      """
      raise NotImplementedError()
    rename.future = None
    def delete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Deletes an existing path.
      """
      raise NotImplementedError()
    delete.future = None
    def exists(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Tests if a path exists.
      """
      raise NotImplementedError()
    exists.future = None
    def readFromFile(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Open an existing file and return an InputStream to read from this file.
      """
      raise NotImplementedError()
    def writeToFile(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Open a file and return an OutputStream to write to this file.
      In Xenon library if request is missing size field then FileSystem.writeToFile(Path file) is used
      else FileSystem.writeToFile(Path path, long size) is used
      """
      raise NotImplementedError()
    writeToFile.future = None
    def appendToFile(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Open an existing file and return an OutputStream to append data to this file.
      """
      raise NotImplementedError()
    appendToFile.future = None
    def list(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """List all entries in the directory dir.
      """
      raise NotImplementedError()
    def getAttributes(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the PathAttributes of an existing path.
      """
      raise NotImplementedError()
    getAttributes.future = None
    def getWorkingDirectory(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the current working directory of this file system.
      """
      raise NotImplementedError()
    getWorkingDirectory.future = None
    def setWorkingDirectory(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Set the current working directory of this file system to directory.
      """
      raise NotImplementedError()
    setWorkingDirectory.future = None
    def setPosixFilePermissions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Sets the POSIX permissions of a path
      """
      raise NotImplementedError()
    setPosixFilePermissions.future = None
    def readSymbolicLink(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Reads the target of a symbolic link
      """
      raise NotImplementedError()
    readSymbolicLink.future = None
    def getPathSeparator(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the path separator used by this file system.
      """
      raise NotImplementedError()
    getPathSeparator.future = None
    def isOpen(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Return if the connection to the FileSystem is open.
      """
      raise NotImplementedError()
    isOpen.future = None
    def close(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Close this filestem
      Any pending/running copy operations of this filestystem will be terminated
      Will also forget this filesystem
      """
      raise NotImplementedError()
    close.future = None
    def waitUntilDone(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Wait until a copy operation is done or until a timeout expires.
      """
      raise NotImplementedError()
    waitUntilDone.future = None
    def localFileSystems(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns filesystems for all local drives
      Not part of FileSystem class in Xenon library
      In Xenon library available as LocalFileSystemUtils.getLocalFileSystems()
      """
      raise NotImplementedError()
    localFileSystems.future = None
    def listFileSystems(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """List the created filesystems
      Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listFileSystems.future = None


  def beta_create_FileSystemService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('xenon.FileSystemService', 'appendToFile'): AppendToFileRequest.FromString,
      ('xenon.FileSystemService', 'cancel'): CopyOperationRequest.FromString,
      ('xenon.FileSystemService', 'close'): FileSystem.FromString,
      ('xenon.FileSystemService', 'copy'): CopyRequest.FromString,
      ('xenon.FileSystemService', 'create'): CreateFileSystemRequest.FromString,
      ('xenon.FileSystemService', 'createDirectories'): PathRequest.FromString,
      ('xenon.FileSystemService', 'createDirectory'): PathRequest.FromString,
      ('xenon.FileSystemService', 'createFile'): PathRequest.FromString,
      ('xenon.FileSystemService', 'createSymbolicLink'): CreateSymbolicLinkRequest.FromString,
      ('xenon.FileSystemService', 'delete'): DeleteRequest.FromString,
      ('xenon.FileSystemService', 'exists'): PathRequest.FromString,
      ('xenon.FileSystemService', 'getAdaptorDescription'): AdaptorName.FromString,
      ('xenon.FileSystemService', 'getAdaptorDescriptions'): Empty.FromString,
      ('xenon.FileSystemService', 'getAdaptorName'): FileSystem.FromString,
      ('xenon.FileSystemService', 'getAdaptorNames'): Empty.FromString,
      ('xenon.FileSystemService', 'getAttributes'): PathRequest.FromString,
      ('xenon.FileSystemService', 'getLocation'): FileSystem.FromString,
      ('xenon.FileSystemService', 'getPathSeparator'): FileSystem.FromString,
      ('xenon.FileSystemService', 'getProperties'): FileSystem.FromString,
      ('xenon.FileSystemService', 'getStatus'): CopyOperationRequest.FromString,
      ('xenon.FileSystemService', 'getWorkingDirectory'): FileSystem.FromString,
      ('xenon.FileSystemService', 'isOpen'): FileSystem.FromString,
      ('xenon.FileSystemService', 'list'): ListRequest.FromString,
      ('xenon.FileSystemService', 'listFileSystems'): Empty.FromString,
      ('xenon.FileSystemService', 'localFileSystems'): Empty.FromString,
      ('xenon.FileSystemService', 'readFromFile'): PathRequest.FromString,
      ('xenon.FileSystemService', 'readSymbolicLink'): PathRequest.FromString,
      ('xenon.FileSystemService', 'rename'): RenameRequest.FromString,
      ('xenon.FileSystemService', 'setPosixFilePermissions'): SetPosixFilePermissionsRequest.FromString,
      ('xenon.FileSystemService', 'setWorkingDirectory'): PathRequest.FromString,
      ('xenon.FileSystemService', 'waitUntilDone'): WaitUntilDoneRequest.FromString,
      ('xenon.FileSystemService', 'writeToFile'): WriteToFileRequest.FromString,
    }
    response_serializers = {
      ('xenon.FileSystemService', 'appendToFile'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'cancel'): CopyStatus.SerializeToString,
      ('xenon.FileSystemService', 'close'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'copy'): CopyOperation.SerializeToString,
      ('xenon.FileSystemService', 'create'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'createDirectories'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'createDirectory'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'createFile'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'createSymbolicLink'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'delete'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'exists'): Is.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorDescription'): FileSystemAdaptorDescription.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorDescriptions'): FileSystemAdaptorDescriptions.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorName'): AdaptorName.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorNames'): AdaptorNames.SerializeToString,
      ('xenon.FileSystemService', 'getAttributes'): PathAttributes.SerializeToString,
      ('xenon.FileSystemService', 'getLocation'): Location.SerializeToString,
      ('xenon.FileSystemService', 'getPathSeparator'): GetPathSeparatorResponse.SerializeToString,
      ('xenon.FileSystemService', 'getProperties'): Properties.SerializeToString,
      ('xenon.FileSystemService', 'getStatus'): CopyStatus.SerializeToString,
      ('xenon.FileSystemService', 'getWorkingDirectory'): Path.SerializeToString,
      ('xenon.FileSystemService', 'isOpen'): Is.SerializeToString,
      ('xenon.FileSystemService', 'list'): PathAttributes.SerializeToString,
      ('xenon.FileSystemService', 'listFileSystems'): FileSystems.SerializeToString,
      ('xenon.FileSystemService', 'localFileSystems'): FileSystems.SerializeToString,
      ('xenon.FileSystemService', 'readFromFile'): ReadFromFileResponse.SerializeToString,
      ('xenon.FileSystemService', 'readSymbolicLink'): Path.SerializeToString,
      ('xenon.FileSystemService', 'rename'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'setPosixFilePermissions'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'setWorkingDirectory'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'waitUntilDone'): CopyStatus.SerializeToString,
      ('xenon.FileSystemService', 'writeToFile'): Empty.SerializeToString,
    }
    method_implementations = {
      ('xenon.FileSystemService', 'appendToFile'): face_utilities.stream_unary_inline(servicer.appendToFile),
      ('xenon.FileSystemService', 'cancel'): face_utilities.unary_unary_inline(servicer.cancel),
      ('xenon.FileSystemService', 'close'): face_utilities.unary_unary_inline(servicer.close),
      ('xenon.FileSystemService', 'copy'): face_utilities.unary_unary_inline(servicer.copy),
      ('xenon.FileSystemService', 'create'): face_utilities.unary_unary_inline(servicer.create),
      ('xenon.FileSystemService', 'createDirectories'): face_utilities.unary_unary_inline(servicer.createDirectories),
      ('xenon.FileSystemService', 'createDirectory'): face_utilities.unary_unary_inline(servicer.createDirectory),
      ('xenon.FileSystemService', 'createFile'): face_utilities.unary_unary_inline(servicer.createFile),
      ('xenon.FileSystemService', 'createSymbolicLink'): face_utilities.unary_unary_inline(servicer.createSymbolicLink),
      ('xenon.FileSystemService', 'delete'): face_utilities.unary_unary_inline(servicer.delete),
      ('xenon.FileSystemService', 'exists'): face_utilities.unary_unary_inline(servicer.exists),
      ('xenon.FileSystemService', 'getAdaptorDescription'): face_utilities.unary_unary_inline(servicer.getAdaptorDescription),
      ('xenon.FileSystemService', 'getAdaptorDescriptions'): face_utilities.unary_unary_inline(servicer.getAdaptorDescriptions),
      ('xenon.FileSystemService', 'getAdaptorName'): face_utilities.unary_unary_inline(servicer.getAdaptorName),
      ('xenon.FileSystemService', 'getAdaptorNames'): face_utilities.unary_unary_inline(servicer.getAdaptorNames),
      ('xenon.FileSystemService', 'getAttributes'): face_utilities.unary_unary_inline(servicer.getAttributes),
      ('xenon.FileSystemService', 'getLocation'): face_utilities.unary_unary_inline(servicer.getLocation),
      ('xenon.FileSystemService', 'getPathSeparator'): face_utilities.unary_unary_inline(servicer.getPathSeparator),
      ('xenon.FileSystemService', 'getProperties'): face_utilities.unary_unary_inline(servicer.getProperties),
      ('xenon.FileSystemService', 'getStatus'): face_utilities.unary_unary_inline(servicer.getStatus),
      ('xenon.FileSystemService', 'getWorkingDirectory'): face_utilities.unary_unary_inline(servicer.getWorkingDirectory),
      ('xenon.FileSystemService', 'isOpen'): face_utilities.unary_unary_inline(servicer.isOpen),
      ('xenon.FileSystemService', 'list'): face_utilities.unary_stream_inline(servicer.list),
      ('xenon.FileSystemService', 'listFileSystems'): face_utilities.unary_unary_inline(servicer.listFileSystems),
      ('xenon.FileSystemService', 'localFileSystems'): face_utilities.unary_unary_inline(servicer.localFileSystems),
      ('xenon.FileSystemService', 'readFromFile'): face_utilities.unary_stream_inline(servicer.readFromFile),
      ('xenon.FileSystemService', 'readSymbolicLink'): face_utilities.unary_unary_inline(servicer.readSymbolicLink),
      ('xenon.FileSystemService', 'rename'): face_utilities.unary_unary_inline(servicer.rename),
      ('xenon.FileSystemService', 'setPosixFilePermissions'): face_utilities.unary_unary_inline(servicer.setPosixFilePermissions),
      ('xenon.FileSystemService', 'setWorkingDirectory'): face_utilities.unary_unary_inline(servicer.setWorkingDirectory),
      ('xenon.FileSystemService', 'waitUntilDone'): face_utilities.unary_unary_inline(servicer.waitUntilDone),
      ('xenon.FileSystemService', 'writeToFile'): face_utilities.stream_unary_inline(servicer.writeToFile),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_FileSystemService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('xenon.FileSystemService', 'appendToFile'): AppendToFileRequest.SerializeToString,
      ('xenon.FileSystemService', 'cancel'): CopyOperationRequest.SerializeToString,
      ('xenon.FileSystemService', 'close'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'copy'): CopyRequest.SerializeToString,
      ('xenon.FileSystemService', 'create'): CreateFileSystemRequest.SerializeToString,
      ('xenon.FileSystemService', 'createDirectories'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'createDirectory'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'createFile'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'createSymbolicLink'): CreateSymbolicLinkRequest.SerializeToString,
      ('xenon.FileSystemService', 'delete'): DeleteRequest.SerializeToString,
      ('xenon.FileSystemService', 'exists'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorDescription'): AdaptorName.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorDescriptions'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorName'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'getAdaptorNames'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'getAttributes'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'getLocation'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'getPathSeparator'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'getProperties'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'getStatus'): CopyOperationRequest.SerializeToString,
      ('xenon.FileSystemService', 'getWorkingDirectory'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'isOpen'): FileSystem.SerializeToString,
      ('xenon.FileSystemService', 'list'): ListRequest.SerializeToString,
      ('xenon.FileSystemService', 'listFileSystems'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'localFileSystems'): Empty.SerializeToString,
      ('xenon.FileSystemService', 'readFromFile'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'readSymbolicLink'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'rename'): RenameRequest.SerializeToString,
      ('xenon.FileSystemService', 'setPosixFilePermissions'): SetPosixFilePermissionsRequest.SerializeToString,
      ('xenon.FileSystemService', 'setWorkingDirectory'): PathRequest.SerializeToString,
      ('xenon.FileSystemService', 'waitUntilDone'): WaitUntilDoneRequest.SerializeToString,
      ('xenon.FileSystemService', 'writeToFile'): WriteToFileRequest.SerializeToString,
    }
    response_deserializers = {
      ('xenon.FileSystemService', 'appendToFile'): Empty.FromString,
      ('xenon.FileSystemService', 'cancel'): CopyStatus.FromString,
      ('xenon.FileSystemService', 'close'): Empty.FromString,
      ('xenon.FileSystemService', 'copy'): CopyOperation.FromString,
      ('xenon.FileSystemService', 'create'): FileSystem.FromString,
      ('xenon.FileSystemService', 'createDirectories'): Empty.FromString,
      ('xenon.FileSystemService', 'createDirectory'): Empty.FromString,
      ('xenon.FileSystemService', 'createFile'): Empty.FromString,
      ('xenon.FileSystemService', 'createSymbolicLink'): Empty.FromString,
      ('xenon.FileSystemService', 'delete'): Empty.FromString,
      ('xenon.FileSystemService', 'exists'): Is.FromString,
      ('xenon.FileSystemService', 'getAdaptorDescription'): FileSystemAdaptorDescription.FromString,
      ('xenon.FileSystemService', 'getAdaptorDescriptions'): FileSystemAdaptorDescriptions.FromString,
      ('xenon.FileSystemService', 'getAdaptorName'): AdaptorName.FromString,
      ('xenon.FileSystemService', 'getAdaptorNames'): AdaptorNames.FromString,
      ('xenon.FileSystemService', 'getAttributes'): PathAttributes.FromString,
      ('xenon.FileSystemService', 'getLocation'): Location.FromString,
      ('xenon.FileSystemService', 'getPathSeparator'): GetPathSeparatorResponse.FromString,
      ('xenon.FileSystemService', 'getProperties'): Properties.FromString,
      ('xenon.FileSystemService', 'getStatus'): CopyStatus.FromString,
      ('xenon.FileSystemService', 'getWorkingDirectory'): Path.FromString,
      ('xenon.FileSystemService', 'isOpen'): Is.FromString,
      ('xenon.FileSystemService', 'list'): PathAttributes.FromString,
      ('xenon.FileSystemService', 'listFileSystems'): FileSystems.FromString,
      ('xenon.FileSystemService', 'localFileSystems'): FileSystems.FromString,
      ('xenon.FileSystemService', 'readFromFile'): ReadFromFileResponse.FromString,
      ('xenon.FileSystemService', 'readSymbolicLink'): Path.FromString,
      ('xenon.FileSystemService', 'rename'): Empty.FromString,
      ('xenon.FileSystemService', 'setPosixFilePermissions'): Empty.FromString,
      ('xenon.FileSystemService', 'setWorkingDirectory'): Empty.FromString,
      ('xenon.FileSystemService', 'waitUntilDone'): CopyStatus.FromString,
      ('xenon.FileSystemService', 'writeToFile'): Empty.FromString,
    }
    cardinalities = {
      'appendToFile': cardinality.Cardinality.STREAM_UNARY,
      'cancel': cardinality.Cardinality.UNARY_UNARY,
      'close': cardinality.Cardinality.UNARY_UNARY,
      'copy': cardinality.Cardinality.UNARY_UNARY,
      'create': cardinality.Cardinality.UNARY_UNARY,
      'createDirectories': cardinality.Cardinality.UNARY_UNARY,
      'createDirectory': cardinality.Cardinality.UNARY_UNARY,
      'createFile': cardinality.Cardinality.UNARY_UNARY,
      'createSymbolicLink': cardinality.Cardinality.UNARY_UNARY,
      'delete': cardinality.Cardinality.UNARY_UNARY,
      'exists': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescription': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescriptions': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorName': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorNames': cardinality.Cardinality.UNARY_UNARY,
      'getAttributes': cardinality.Cardinality.UNARY_UNARY,
      'getLocation': cardinality.Cardinality.UNARY_UNARY,
      'getPathSeparator': cardinality.Cardinality.UNARY_UNARY,
      'getProperties': cardinality.Cardinality.UNARY_UNARY,
      'getStatus': cardinality.Cardinality.UNARY_UNARY,
      'getWorkingDirectory': cardinality.Cardinality.UNARY_UNARY,
      'isOpen': cardinality.Cardinality.UNARY_UNARY,
      'list': cardinality.Cardinality.UNARY_STREAM,
      'listFileSystems': cardinality.Cardinality.UNARY_UNARY,
      'localFileSystems': cardinality.Cardinality.UNARY_UNARY,
      'readFromFile': cardinality.Cardinality.UNARY_STREAM,
      'readSymbolicLink': cardinality.Cardinality.UNARY_UNARY,
      'rename': cardinality.Cardinality.UNARY_UNARY,
      'setPosixFilePermissions': cardinality.Cardinality.UNARY_UNARY,
      'setWorkingDirectory': cardinality.Cardinality.UNARY_UNARY,
      'waitUntilDone': cardinality.Cardinality.UNARY_UNARY,
      'writeToFile': cardinality.Cardinality.STREAM_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'xenon.FileSystemService', cardinalities, options=stub_options)


  class BetaSchedulerServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """
    def getAdaptorDescriptions(self, request, context):
      """Gives a list of the descriptions of the available adaptors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorNames(self, request, context):
      """Gives a list names of the available adaptors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorDescription(self, request, context):
      """Gives the description of the adaptor with the given name.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def create(self, request, context):
      """Create a new Scheduler using the adaptor connecting to the location using credentials to get access.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorName(self, request, context):
      """Get the name of the adaptor that created this Scheduler.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getLocation(self, request, context):
      """Get the location that this Scheduler is connected to.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getProperties(self, request, context):
      """Get the properties used to create this Scheduler.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def submitBatchJob(self, request, context):
      """Submit a batch job.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def submitInteractiveJob(self, request_iterator, context):
      """Submit an interactive job
      The first response message in the response stream will contain the job identifier and empty stdout and stdout.
      Other response messages will also contain the job identifier and filled stdout and/or stderr.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueueNames(self, request, context):
      """Get the queue names supported by this Scheduler.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDefaultQueueName(self, request, context):
      """Get the name of the default queue.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobs(self, request, context):
      """Get all job identifier of jobs currently in (one ore more) queues.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobStatus(self, request, context):
      """Get the status of a Job.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobStatuses(self, request, context):
      """Get the status of all specified jobs.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueueStatus(self, request, context):
      """Get the status of the queue.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueueStatuses(self, request, context):
      """Get the status of all queues.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def waitUntilDone(self, request, context):
      """Wait until a job is done or until a timeout expires.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def waitUntilRunning(self, request, context):
      """Wait until a job starts running, or until a timeout expires.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isOpen(self, request, context):
      """Test if the connection of this Scheduler is open.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cancelJob(self, request, context):
      """Cancel a job
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getFileSystem(self, request, context):
      """Retrieve the FileSystem used internally by this Scheduler.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def close(self, request, context):
      """Close this Scheduler.
      If scheduler is embedded then any pending/running jobs will be killed
      Will also forget this scheduler
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def localScheduler(self, request, context):
      """Get scheduler on local filesystem with default location, credential and no properties
      Not part of Scheduler class in Xenon library
      In Xenon library available as Scheduler.create("local")
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listSchedulers(self, request, context):
      """List the created schedulers
      Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSchedulerServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """
    def getAdaptorDescriptions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives a list of the descriptions of the available adaptors.
      """
      raise NotImplementedError()
    getAdaptorDescriptions.future = None
    def getAdaptorNames(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives a list names of the available adaptors.
      """
      raise NotImplementedError()
    getAdaptorNames.future = None
    def getAdaptorDescription(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gives the description of the adaptor with the given name.
      """
      raise NotImplementedError()
    getAdaptorDescription.future = None
    def create(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Create a new Scheduler using the adaptor connecting to the location using credentials to get access.
      """
      raise NotImplementedError()
    create.future = None
    def getAdaptorName(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the name of the adaptor that created this Scheduler.
      """
      raise NotImplementedError()
    getAdaptorName.future = None
    def getLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the location that this Scheduler is connected to.
      """
      raise NotImplementedError()
    getLocation.future = None
    def getProperties(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the properties used to create this Scheduler.
      """
      raise NotImplementedError()
    getProperties.future = None
    def submitBatchJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Submit a batch job.
      """
      raise NotImplementedError()
    submitBatchJob.future = None
    def submitInteractiveJob(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Submit an interactive job
      The first response message in the response stream will contain the job identifier and empty stdout and stdout.
      Other response messages will also contain the job identifier and filled stdout and/or stderr.
      """
      raise NotImplementedError()
    def getQueueNames(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the queue names supported by this Scheduler.
      """
      raise NotImplementedError()
    getQueueNames.future = None
    def getDefaultQueueName(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the name of the default queue.
      """
      raise NotImplementedError()
    getDefaultQueueName.future = None
    def getJobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get all job identifier of jobs currently in (one ore more) queues.
      """
      raise NotImplementedError()
    getJobs.future = None
    def getJobStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the status of a Job.
      """
      raise NotImplementedError()
    getJobStatus.future = None
    def getJobStatuses(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the status of all specified jobs.
      """
      raise NotImplementedError()
    getJobStatuses.future = None
    def getQueueStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the status of the queue.
      """
      raise NotImplementedError()
    getQueueStatus.future = None
    def getQueueStatuses(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the status of all queues.
      """
      raise NotImplementedError()
    getQueueStatuses.future = None
    def waitUntilDone(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Wait until a job is done or until a timeout expires.
      """
      raise NotImplementedError()
    waitUntilDone.future = None
    def waitUntilRunning(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Wait until a job starts running, or until a timeout expires.
      """
      raise NotImplementedError()
    waitUntilRunning.future = None
    def isOpen(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Test if the connection of this Scheduler is open.
      """
      raise NotImplementedError()
    isOpen.future = None
    def cancelJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Cancel a job
      """
      raise NotImplementedError()
    cancelJob.future = None
    def getFileSystem(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve the FileSystem used internally by this Scheduler.
      """
      raise NotImplementedError()
    getFileSystem.future = None
    def close(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Close this Scheduler.
      If scheduler is embedded then any pending/running jobs will be killed
      Will also forget this scheduler
      """
      raise NotImplementedError()
    close.future = None
    def localScheduler(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get scheduler on local filesystem with default location, credential and no properties
      Not part of Scheduler class in Xenon library
      In Xenon library available as Scheduler.create("local")
      """
      raise NotImplementedError()
    localScheduler.future = None
    def listSchedulers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """List the created schedulers
      Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listSchedulers.future = None


  def beta_create_SchedulerService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('xenon.SchedulerService', 'cancelJob'): JobRequest.FromString,
      ('xenon.SchedulerService', 'close'): Scheduler.FromString,
      ('xenon.SchedulerService', 'create'): CreateSchedulerRequest.FromString,
      ('xenon.SchedulerService', 'getAdaptorDescription'): AdaptorName.FromString,
      ('xenon.SchedulerService', 'getAdaptorDescriptions'): Empty.FromString,
      ('xenon.SchedulerService', 'getAdaptorName'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getAdaptorNames'): Empty.FromString,
      ('xenon.SchedulerService', 'getDefaultQueueName'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getFileSystem'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getJobStatus'): JobRequest.FromString,
      ('xenon.SchedulerService', 'getJobStatuses'): GetJobStatusesRequest.FromString,
      ('xenon.SchedulerService', 'getJobs'): SchedulerAndQueues.FromString,
      ('xenon.SchedulerService', 'getLocation'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getProperties'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getQueueNames'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getQueueStatus'): GetQueueStatusRequest.FromString,
      ('xenon.SchedulerService', 'getQueueStatuses'): SchedulerAndQueues.FromString,
      ('xenon.SchedulerService', 'isOpen'): Scheduler.FromString,
      ('xenon.SchedulerService', 'listSchedulers'): Empty.FromString,
      ('xenon.SchedulerService', 'localScheduler'): Empty.FromString,
      ('xenon.SchedulerService', 'submitBatchJob'): SubmitBatchJobRequest.FromString,
      ('xenon.SchedulerService', 'submitInteractiveJob'): SubmitInteractiveJobRequest.FromString,
      ('xenon.SchedulerService', 'waitUntilDone'): WaitRequest.FromString,
      ('xenon.SchedulerService', 'waitUntilRunning'): WaitRequest.FromString,
    }
    response_serializers = {
      ('xenon.SchedulerService', 'cancelJob'): JobStatus.SerializeToString,
      ('xenon.SchedulerService', 'close'): Empty.SerializeToString,
      ('xenon.SchedulerService', 'create'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorDescription'): SchedulerAdaptorDescription.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorDescriptions'): SchedulerAdaptorDescriptions.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorName'): AdaptorName.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorNames'): AdaptorNames.SerializeToString,
      ('xenon.SchedulerService', 'getDefaultQueueName'): Queue.SerializeToString,
      ('xenon.SchedulerService', 'getFileSystem'): FileSystem.SerializeToString,
      ('xenon.SchedulerService', 'getJobStatus'): JobStatus.SerializeToString,
      ('xenon.SchedulerService', 'getJobStatuses'): GetJobStatusesResponse.SerializeToString,
      ('xenon.SchedulerService', 'getJobs'): Jobs.SerializeToString,
      ('xenon.SchedulerService', 'getLocation'): Location.SerializeToString,
      ('xenon.SchedulerService', 'getProperties'): Properties.SerializeToString,
      ('xenon.SchedulerService', 'getQueueNames'): Queues.SerializeToString,
      ('xenon.SchedulerService', 'getQueueStatus'): QueueStatus.SerializeToString,
      ('xenon.SchedulerService', 'getQueueStatuses'): QueueStatuses.SerializeToString,
      ('xenon.SchedulerService', 'isOpen'): Is.SerializeToString,
      ('xenon.SchedulerService', 'listSchedulers'): Schedulers.SerializeToString,
      ('xenon.SchedulerService', 'localScheduler'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'submitBatchJob'): Job.SerializeToString,
      ('xenon.SchedulerService', 'submitInteractiveJob'): SubmitInteractiveJobResponse.SerializeToString,
      ('xenon.SchedulerService', 'waitUntilDone'): JobStatus.SerializeToString,
      ('xenon.SchedulerService', 'waitUntilRunning'): JobStatus.SerializeToString,
    }
    method_implementations = {
      ('xenon.SchedulerService', 'cancelJob'): face_utilities.unary_unary_inline(servicer.cancelJob),
      ('xenon.SchedulerService', 'close'): face_utilities.unary_unary_inline(servicer.close),
      ('xenon.SchedulerService', 'create'): face_utilities.unary_unary_inline(servicer.create),
      ('xenon.SchedulerService', 'getAdaptorDescription'): face_utilities.unary_unary_inline(servicer.getAdaptorDescription),
      ('xenon.SchedulerService', 'getAdaptorDescriptions'): face_utilities.unary_unary_inline(servicer.getAdaptorDescriptions),
      ('xenon.SchedulerService', 'getAdaptorName'): face_utilities.unary_unary_inline(servicer.getAdaptorName),
      ('xenon.SchedulerService', 'getAdaptorNames'): face_utilities.unary_unary_inline(servicer.getAdaptorNames),
      ('xenon.SchedulerService', 'getDefaultQueueName'): face_utilities.unary_unary_inline(servicer.getDefaultQueueName),
      ('xenon.SchedulerService', 'getFileSystem'): face_utilities.unary_unary_inline(servicer.getFileSystem),
      ('xenon.SchedulerService', 'getJobStatus'): face_utilities.unary_unary_inline(servicer.getJobStatus),
      ('xenon.SchedulerService', 'getJobStatuses'): face_utilities.unary_unary_inline(servicer.getJobStatuses),
      ('xenon.SchedulerService', 'getJobs'): face_utilities.unary_unary_inline(servicer.getJobs),
      ('xenon.SchedulerService', 'getLocation'): face_utilities.unary_unary_inline(servicer.getLocation),
      ('xenon.SchedulerService', 'getProperties'): face_utilities.unary_unary_inline(servicer.getProperties),
      ('xenon.SchedulerService', 'getQueueNames'): face_utilities.unary_unary_inline(servicer.getQueueNames),
      ('xenon.SchedulerService', 'getQueueStatus'): face_utilities.unary_unary_inline(servicer.getQueueStatus),
      ('xenon.SchedulerService', 'getQueueStatuses'): face_utilities.unary_unary_inline(servicer.getQueueStatuses),
      ('xenon.SchedulerService', 'isOpen'): face_utilities.unary_unary_inline(servicer.isOpen),
      ('xenon.SchedulerService', 'listSchedulers'): face_utilities.unary_unary_inline(servicer.listSchedulers),
      ('xenon.SchedulerService', 'localScheduler'): face_utilities.unary_unary_inline(servicer.localScheduler),
      ('xenon.SchedulerService', 'submitBatchJob'): face_utilities.unary_unary_inline(servicer.submitBatchJob),
      ('xenon.SchedulerService', 'submitInteractiveJob'): face_utilities.stream_stream_inline(servicer.submitInteractiveJob),
      ('xenon.SchedulerService', 'waitUntilDone'): face_utilities.unary_unary_inline(servicer.waitUntilDone),
      ('xenon.SchedulerService', 'waitUntilRunning'): face_utilities.unary_unary_inline(servicer.waitUntilRunning),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_SchedulerService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('xenon.SchedulerService', 'cancelJob'): JobRequest.SerializeToString,
      ('xenon.SchedulerService', 'close'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'create'): CreateSchedulerRequest.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorDescription'): AdaptorName.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorDescriptions'): Empty.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorName'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getAdaptorNames'): Empty.SerializeToString,
      ('xenon.SchedulerService', 'getDefaultQueueName'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getFileSystem'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getJobStatus'): JobRequest.SerializeToString,
      ('xenon.SchedulerService', 'getJobStatuses'): GetJobStatusesRequest.SerializeToString,
      ('xenon.SchedulerService', 'getJobs'): SchedulerAndQueues.SerializeToString,
      ('xenon.SchedulerService', 'getLocation'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getProperties'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getQueueNames'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'getQueueStatus'): GetQueueStatusRequest.SerializeToString,
      ('xenon.SchedulerService', 'getQueueStatuses'): SchedulerAndQueues.SerializeToString,
      ('xenon.SchedulerService', 'isOpen'): Scheduler.SerializeToString,
      ('xenon.SchedulerService', 'listSchedulers'): Empty.SerializeToString,
      ('xenon.SchedulerService', 'localScheduler'): Empty.SerializeToString,
      ('xenon.SchedulerService', 'submitBatchJob'): SubmitBatchJobRequest.SerializeToString,
      ('xenon.SchedulerService', 'submitInteractiveJob'): SubmitInteractiveJobRequest.SerializeToString,
      ('xenon.SchedulerService', 'waitUntilDone'): WaitRequest.SerializeToString,
      ('xenon.SchedulerService', 'waitUntilRunning'): WaitRequest.SerializeToString,
    }
    response_deserializers = {
      ('xenon.SchedulerService', 'cancelJob'): JobStatus.FromString,
      ('xenon.SchedulerService', 'close'): Empty.FromString,
      ('xenon.SchedulerService', 'create'): Scheduler.FromString,
      ('xenon.SchedulerService', 'getAdaptorDescription'): SchedulerAdaptorDescription.FromString,
      ('xenon.SchedulerService', 'getAdaptorDescriptions'): SchedulerAdaptorDescriptions.FromString,
      ('xenon.SchedulerService', 'getAdaptorName'): AdaptorName.FromString,
      ('xenon.SchedulerService', 'getAdaptorNames'): AdaptorNames.FromString,
      ('xenon.SchedulerService', 'getDefaultQueueName'): Queue.FromString,
      ('xenon.SchedulerService', 'getFileSystem'): FileSystem.FromString,
      ('xenon.SchedulerService', 'getJobStatus'): JobStatus.FromString,
      ('xenon.SchedulerService', 'getJobStatuses'): GetJobStatusesResponse.FromString,
      ('xenon.SchedulerService', 'getJobs'): Jobs.FromString,
      ('xenon.SchedulerService', 'getLocation'): Location.FromString,
      ('xenon.SchedulerService', 'getProperties'): Properties.FromString,
      ('xenon.SchedulerService', 'getQueueNames'): Queues.FromString,
      ('xenon.SchedulerService', 'getQueueStatus'): QueueStatus.FromString,
      ('xenon.SchedulerService', 'getQueueStatuses'): QueueStatuses.FromString,
      ('xenon.SchedulerService', 'isOpen'): Is.FromString,
      ('xenon.SchedulerService', 'listSchedulers'): Schedulers.FromString,
      ('xenon.SchedulerService', 'localScheduler'): Scheduler.FromString,
      ('xenon.SchedulerService', 'submitBatchJob'): Job.FromString,
      ('xenon.SchedulerService', 'submitInteractiveJob'): SubmitInteractiveJobResponse.FromString,
      ('xenon.SchedulerService', 'waitUntilDone'): JobStatus.FromString,
      ('xenon.SchedulerService', 'waitUntilRunning'): JobStatus.FromString,
    }
    cardinalities = {
      'cancelJob': cardinality.Cardinality.UNARY_UNARY,
      'close': cardinality.Cardinality.UNARY_UNARY,
      'create': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescription': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescriptions': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorName': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorNames': cardinality.Cardinality.UNARY_UNARY,
      'getDefaultQueueName': cardinality.Cardinality.UNARY_UNARY,
      'getFileSystem': cardinality.Cardinality.UNARY_UNARY,
      'getJobStatus': cardinality.Cardinality.UNARY_UNARY,
      'getJobStatuses': cardinality.Cardinality.UNARY_UNARY,
      'getJobs': cardinality.Cardinality.UNARY_UNARY,
      'getLocation': cardinality.Cardinality.UNARY_UNARY,
      'getProperties': cardinality.Cardinality.UNARY_UNARY,
      'getQueueNames': cardinality.Cardinality.UNARY_UNARY,
      'getQueueStatus': cardinality.Cardinality.UNARY_UNARY,
      'getQueueStatuses': cardinality.Cardinality.UNARY_UNARY,
      'isOpen': cardinality.Cardinality.UNARY_UNARY,
      'listSchedulers': cardinality.Cardinality.UNARY_UNARY,
      'localScheduler': cardinality.Cardinality.UNARY_UNARY,
      'submitBatchJob': cardinality.Cardinality.UNARY_UNARY,
      'submitInteractiveJob': cardinality.Cardinality.STREAM_STREAM,
      'waitUntilDone': cardinality.Cardinality.UNARY_UNARY,
      'waitUntilRunning': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'xenon.SchedulerService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
