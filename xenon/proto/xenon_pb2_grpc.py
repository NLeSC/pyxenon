# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from xenon.proto import xenon_pb2 as xenon_dot_proto_dot_xenon__pb2


class XenonFileSystemsStub(object):
  """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
  This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.XenonFileSystems/getAdaptorDescriptions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescriptions.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.XenonFileSystems/getAdaptorDescription',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescription.FromString,
        )
    self.create = channel.unary_unary(
        '/xenon.XenonFileSystems/create',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateFileSystemRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
        )
    self.createDirectories = channel.unary_unary(
        '/xenon.XenonFileSystems/createDirectories',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createDirectory = channel.unary_unary(
        '/xenon.XenonFileSystems/createDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createFile = channel.unary_unary(
        '/xenon.XenonFileSystems/createFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.createSymbolicLink = channel.unary_unary(
        '/xenon.XenonFileSystems/createSymbolicLink',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateSymbolicLinkRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.copy = channel.unary_unary(
        '/xenon.XenonFileSystems/copy',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.FromString,
        )
    self.cancel = channel.unary_unary(
        '/xenon.XenonFileSystems/cancel',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.getStatus = channel.unary_unary(
        '/xenon.XenonFileSystems/getStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.rename = channel.unary_unary(
        '/xenon.XenonFileSystems/rename',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.RenameRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.delete = channel.unary_unary(
        '/xenon.XenonFileSystems/delete',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.DeleteRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.exists = channel.unary_unary(
        '/xenon.XenonFileSystems/exists',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.readFromFile = channel.unary_stream(
        '/xenon.XenonFileSystems/readFromFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.ReadFromFileResponse.FromString,
        )
    self.writeToFile = channel.stream_unary(
        '/xenon.XenonFileSystems/writeToFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.WriteToFileRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.appendToFile = channel.stream_unary(
        '/xenon.XenonFileSystems/appendToFile',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AppendToFileRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.list = channel.unary_stream(
        '/xenon.XenonFileSystems/list',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.ListRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.FromString,
        )
    self.getAttributes = channel.unary_unary(
        '/xenon.XenonFileSystems/getAttributes',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.FromString,
        )
    self.getWorkingDirectory = channel.unary_unary(
        '/xenon.XenonFileSystems/getWorkingDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
        )
    self.setWorkingDirectory = channel.unary_unary(
        '/xenon.XenonFileSystems/setWorkingDirectory',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.setPosixFilePermissions = channel.unary_unary(
        '/xenon.XenonFileSystems/setPosixFilePermissions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SetPosixFilePermissionsRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.readSymbolicLink = channel.unary_unary(
        '/xenon.XenonFileSystems/readSymbolicLink',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.XenonFileSystems/isOpen',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.XenonFileSystems/close',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.waitUntilDone = channel.unary_unary(
        '/xenon.XenonFileSystems/waitUntilDone',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationWithTimeout.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.FromString,
        )
    self.localFileSystems = channel.unary_unary(
        '/xenon.XenonFileSystems/localFileSystems',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.FromString,
        )
    self.listFileSystems = channel.unary_unary(
        '/xenon.XenonFileSystems/listFileSystems',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.FromString,
        )


class XenonFileSystemsServicer(object):
  """XenonFiles represents the Xenon nl.esciencecenter.xenon.filesystems.FileSystem class.
  This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def getAdaptorDescriptions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectories(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectory(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createFile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createSymbolicLink(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def copy(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancel(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def rename(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def exists(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readFromFile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def writeToFile(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def appendToFile(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAttributes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getWorkingDirectory(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setWorkingDirectory(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setPosixFilePermissions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readSymbolicLink(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Closes a filestem, any actions running it with this filestystem will be terminated, will also forget the filesystem
    Any pending/running copy operations will be killed
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilDone(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localFileSystems(self, request, context):
    """Returns filesystems for all local drives
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listFileSystems(self, request, context):
    """List the created filesystems
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_XenonFileSystemsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystemAdaptorDescription.SerializeToString,
      ),
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateFileSystemRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.SerializeToString,
      ),
      'createDirectories': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectories,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createFile': grpc.unary_unary_rpc_method_handler(
          servicer.createFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'createSymbolicLink': grpc.unary_unary_rpc_method_handler(
          servicer.createSymbolicLink,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateSymbolicLinkRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'copy': grpc.unary_unary_rpc_method_handler(
          servicer.copy,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.SerializeToString,
      ),
      'cancel': grpc.unary_unary_rpc_method_handler(
          servicer.cancel,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'getStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperation.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'rename': grpc.unary_unary_rpc_method_handler(
          servicer.rename,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.RenameRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.DeleteRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'exists': grpc.unary_unary_rpc_method_handler(
          servicer.exists,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'readFromFile': grpc.unary_stream_rpc_method_handler(
          servicer.readFromFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.ReadFromFileResponse.SerializeToString,
      ),
      'writeToFile': grpc.stream_unary_rpc_method_handler(
          servicer.writeToFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.WriteToFileRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'appendToFile': grpc.stream_unary_rpc_method_handler(
          servicer.appendToFile,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AppendToFileRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'list': grpc.unary_stream_rpc_method_handler(
          servicer.list,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.ListRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.SerializeToString,
      ),
      'getAttributes': grpc.unary_unary_rpc_method_handler(
          servicer.getAttributes,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.PathAttributes.SerializeToString,
      ),
      'getWorkingDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.getWorkingDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
      ),
      'setWorkingDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.setWorkingDirectory,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'setPosixFilePermissions': grpc.unary_unary_rpc_method_handler(
          servicer.setPosixFilePermissions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SetPosixFilePermissionsRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'readSymbolicLink': grpc.unary_unary_rpc_method_handler(
          servicer.readSymbolicLink,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Path.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Path.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.FileSystem.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'waitUntilDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilDone,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CopyOperationWithTimeout.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.CopyStatus.SerializeToString,
      ),
      'localFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.localFileSystems,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.SerializeToString,
      ),
      'listFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.listFileSystems,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.FileSystems.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.XenonFileSystems', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class XenonSchedulersStub(object):
  """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.XenonSchedulers/getAdaptorDescriptions',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescriptions.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.XenonSchedulers/getAdaptorDescription',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescription.FromString,
        )
    self.create = channel.unary_unary(
        '/xenon.XenonSchedulers/create',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.CreateSchedulerRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
        )
    self.submitBatchJob = channel.unary_unary(
        '/xenon.XenonSchedulers/submitBatchJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitBatchJobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Job.FromString,
        )
    self.submitInteractiveJob = channel.stream_stream(
        '/xenon.XenonSchedulers/submitInteractiveJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobRequest.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobResponse.FromString,
        )
    self.getQueues = channel.unary_unary(
        '/xenon.XenonSchedulers/getQueues',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Queues.FromString,
        )
    self.getDefaultQueueName = channel.unary_unary(
        '/xenon.XenonSchedulers/getDefaultQueueName',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Queue.FromString,
        )
    self.getJobs = channel.unary_unary(
        '/xenon.XenonSchedulers/getJobs',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Jobs.FromString,
        )
    self.getJobStatus = channel.unary_unary(
        '/xenon.XenonSchedulers/getJobStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.getJobStatuses = channel.unary_unary(
        '/xenon.XenonSchedulers/getJobStatuses',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Jobs.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatuses.FromString,
        )
    self.getQueueStatus = channel.unary_unary(
        '/xenon.XenonSchedulers/getQueueStatus',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueue.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.QueueStatus.FromString,
        )
    self.getQueueStatuses = channel.unary_unary(
        '/xenon.XenonSchedulers/getQueueStatuses',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.QueueStatuses.FromString,
        )
    self.waitUntilDone = channel.unary_unary(
        '/xenon.XenonSchedulers/waitUntilDone',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.JobWithTimeout.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.waitUntilRunning = channel.unary_unary(
        '/xenon.XenonSchedulers/waitUntilRunning',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.JobWithTimeout.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.XenonSchedulers/isOpen',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Is.FromString,
        )
    self.cancelJob = channel.unary_unary(
        '/xenon.XenonSchedulers/cancelJob',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.XenonSchedulers/close',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
        )
    self.localScheduler = channel.unary_unary(
        '/xenon.XenonSchedulers/localScheduler',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
        )
    self.listSchedulers = channel.unary_unary(
        '/xenon.XenonSchedulers/listSchedulers',
        request_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon_dot_proto_dot_xenon__pb2.Schedulers.FromString,
        )


class XenonSchedulersServicer(object):
  """The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def getAdaptorDescriptions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submitBatchJob(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submitInteractiveJob(self, request_iterator, context):
    """The first response message in the response stream will contain the job identifier and empty stdout and stdout.
    Other response messages will also contain the job identifier and filled stdout and/or stderr.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueues(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getDefaultQueueName(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatuses(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatuses(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilDone(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilRunning(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelJob(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Close scheduler and forget it
    If scheduler is embedded then any pending/running jobs will be killed
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localScheduler(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listSchedulers(self, request, context):
    """List the created schedulers
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_XenonSchedulersServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAdaptorDescription.SerializeToString,
      ),
      'create': grpc.unary_unary_rpc_method_handler(
          servicer.create,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.CreateSchedulerRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
      ),
      'submitBatchJob': grpc.unary_unary_rpc_method_handler(
          servicer.submitBatchJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitBatchJobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Job.SerializeToString,
      ),
      'submitInteractiveJob': grpc.stream_stream_rpc_method_handler(
          servicer.submitInteractiveJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobRequest.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.SubmitInteractiveJobResponse.SerializeToString,
      ),
      'getQueues': grpc.unary_unary_rpc_method_handler(
          servicer.getQueues,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Queues.SerializeToString,
      ),
      'getDefaultQueueName': grpc.unary_unary_rpc_method_handler(
          servicer.getDefaultQueueName,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Queue.SerializeToString,
      ),
      'getJobs': grpc.unary_unary_rpc_method_handler(
          servicer.getJobs,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Jobs.SerializeToString,
      ),
      'getJobStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Job.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'getJobStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatuses,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Jobs.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatuses.SerializeToString,
      ),
      'getQueueStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatus,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueue.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.QueueStatus.SerializeToString,
      ),
      'getQueueStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatuses,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.QueueStatuses.SerializeToString,
      ),
      'waitUntilDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilDone,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.JobWithTimeout.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'waitUntilRunning': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilRunning,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.JobWithTimeout.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Is.SerializeToString,
      ),
      'cancelJob': grpc.unary_unary_rpc_method_handler(
          servicer.cancelJob,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Job.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.JobStatus.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Empty.SerializeToString,
      ),
      'localScheduler': grpc.unary_unary_rpc_method_handler(
          servicer.localScheduler,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Scheduler.SerializeToString,
      ),
      'listSchedulers': grpc.unary_unary_rpc_method_handler(
          servicer.listSchedulers,
          request_deserializer=xenon_dot_proto_dot_xenon__pb2.Empty.FromString,
          response_serializer=xenon_dot_proto_dot_xenon__pb2.Schedulers.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.XenonSchedulers', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
